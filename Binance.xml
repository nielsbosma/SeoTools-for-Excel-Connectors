<?xml version="1.0" encoding="utf-8" ?>
<Suite Title="Binance" Id="Binance" Category="Finance" RequireVersion="7.0"
       SourceUrl="https://github.com/nielsbosma/SeoTools-for-Excel-Connectors/blob/master/Binance.xml"
       HelpUrl="http://seotoolsforexcel.com/binance" HelpText="Documentation">

  <Author Name="Dovydas Meilunas" Url="https://github.com/dovydasm"/>

  <Settings HelpText="What's this?" HelpUrl="http://seotoolsforexcel.com/binance/">
    <Text Id="ApiKey" Title="API Key" Required="false" HelpUrl="http://seotoolsforexcel.com/binance"/>
    <Text Id="SecretKey" Title="Secret Key" Required="false" HelpUrl="http://seotoolsforexcel.com/binance"/>
  </Settings>

  <Resources>
    <Resource Id="ApiKeyRequired">
      <Fail>
        <Compute>
          <Compute.Expr>
            <![CDATA[
              @{
                @if(string.IsNullOrEmpty(Model.ApiKey)){
                throw new Exception("API key required. Click \"Settings\" in the connector and enter your API key");
                }
              }
            ]]>
          </Compute.Expr>
        </Compute>
      </Fail>
    </Resource>
    <Resource Id="Error">
      <Fail>
        <JsonPath Expr="$.msg" Id="Error"/>
      </Fail>
    </Resource>
    <Resource Id="Intervals">
      <Item Id="1m" Title="1 minute"/>
      <Item Id="3m" Title="3 minutes"/>
      <Item Id="5m" Title="5 minutes"/>
      <Item Id="15m" Title="15 minute"/>
      <Item Id="30m" Title="30 minute"/>
      <Item Id="1h" Title="1 hour"/>
      <Item Id="2h" Title="2 hours"/>
      <Item Id="4h" Title="4 hours"/>
      <Item Id="6h" Title="6 hours"/>
      <Item Id="8h" Title="8 hours"/>
      <Item Id="12h" Title="12 hours"/>
      <Item Id="1d" Title="1 days"/>
      <Item Id="3d" Title="3 days"/>
      <Item Id="1w" Title="1 week"/>
      <Item Id="1M" Title="1 month"/>
    </Resource>
  </Resources>

  <RestConnector Id="ExchangeInfo" Title="Exchange Info" HelpText="List all supported trading pairs" HelpUrl="https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#exchange-information">
    <Fetch Url="https://api.binance.com/api/v1/exchangeInfo"/>
    <Parse>
      <JsonPath Expr="$.symbols.*" Id="Symbol" Title="Symbol">
        <JsonPath Expr="symbol" Id="Symbol" Title="Symbol" Converter="String"/>
        <JsonPath Expr="status" Id="Status" Title="Status" Converter="String"/>
        <JsonPath Expr="baseAsset" Id="BaseAsset" Title="Base Asset" Converter="String"/>
        <JsonPath Expr="baseAssetPrecision" Id="BasePrecision" Title="Base Asset Precision" Converter="Int" Checked="False"/>
        <JsonPath Expr="quoteAsset" Id="QupteAsset" Title="Quote Asset" Converter="String"/>
        <JsonPath Expr="quotePrecision" Id="QuotePrecision" Title="Quote Precision" Converter="Int" Checked="False"/>
        <JsonPath Expr="icebergAllowed" Id="IcebergAllowed" Title="Iceberg Orders Allowed" Converter="Bool" Checked="False"/>
        <JsonPath Expr="filters.*.minPrice" Id="MinPrice" Title="Minimum Price" Converter="Double"/>
        <JsonPath Expr="filters.*.maxPrice" Id="MaxPrice" Title="Maximum Price" Converter="Double"/>
        <JsonPath Expr="filters.*.tickSize" Id="TickSize" Title="Tick Size" Converter="Double"/>
        <JsonPath Expr="filters.*.minQty" Id="MinQty" Title="Minimum Quantity" Converter="Double"/>
        <JsonPath Expr="filters.*.maxQty" Id="MaxQty" Title="Maximum Quantity" Converter="Double"/>
        <JsonPath Expr="filters.*.stepSize" Id="StepSize" Title="Step Size" Converter="Double"/>
      </JsonPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="ListSymbolsHidden" Title="ListSymbolsHidden" HelpUrl="https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#exchange-information" Hidden="true">
    <Fetch Url="https://api.binance.com/api/v1/exchangeInfo"/>
    <Parse>
      <JsonPath Expr="$.symbols.*" Id="Symbol" Title="Symbol">
        <JsonPath Expr="symbol" Id="Symbol" Title="Symbol" Converter="String"/>
        <JsonPath Expr="symbol" Id="SymbolName" Title="Symbol" Converter="String"/>
      </JsonPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="OrderBook" Title="Order Book" HelpText="List of open orders for specified symbol" HelpUrl="https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#order-book">
    <Parameters>
      <Text Id="Symbol" Title="Trading pair symbol (e.g. ETHBTC)" DefaultValue="" Required="true" Select.Connector="ListSymbolsHidden" Select.IdField="Symbol" Select.TitleField="SymbolName" Debug.DefaultValue="ETHBTC"/>
      <Number Id="Limit" Title="Limit (increments of 5)" DefaultValue="100" Min="5" Max="1000" Required="false" HelpText=""/>
    </Parameters>
    <Fetch>
      <Fetch.Url>
        <![CDATA[
        https://api.binance.com/api/v1/depth?
        symbol=@Model.Symbol
        @if(Model.Limit % 5 == 0)
        {
          @: &limit=@Model.Limit
        }
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.bids.*" Id="Bids">
        <JsonPath Expr="$[0]" Id="BidPrice" Title="Bid Price" Converter="Double"/>
        <JsonPath Expr="$[1]" Id="BidQty" Title="Bid Quantity" Converter="Double"/>
      </JsonPath>
      <JsonPath Expr="$.asks.*" Id="Asks">
        <JsonPath Expr="$[0]" Id="AskPrice" Title="Ask Price" Converter="Double"/>
        <JsonPath Expr="$[1]" Id="AskQty" Title="Ask Qty" Converter="Double"/>
      </JsonPath>
    </Parse>
    <Resource Id="Error"/>
  </RestConnector>

  <RestConnector Id="RecentTradesList" Title="Recent Trades List" HelpText="List recently made trades for specific symbol" HelpUrl="https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#recent-trades-list">
    <Parameters>
      <Text Id="Symbol" Title="Trading pair symbol (e.g. ETHBTC)" DefaultValue="" Required="true" Select.Connector="ListSymbolsHidden" Select.IdField="Symbol" Select.TitleField="SymbolName" Debug.DefaultValue="ETHBTC"/>
      <Number Id="Limit" Title="Limit (increments of 5)" DefaultValue="500" Min="5" Max="500" Required="false" HelpText=""/>
    </Parameters>
    <Fetch>
      <Fetch.Url>
        <![CDATA[
        https://api.binance.com/api/v1/trades?
        symbol=@Model.Symbol
        @if(Model.Limit % 5 == 0)
        {
          @: &limit=@Model.Limit
        }
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.*" Id="Trades">
        <JsonPath Expr="id" Id="TradeId" Title="Id" Converter="Int" Checked="False"/>
        <JsonPath Expr="price" Id="Price" Title="Price" Converter="Double"/>
        <JsonPath Expr="qty" Id="Quantity" Title="Quantity" Converter="Double"/>
        <Compute Id="Time" Title="Time" Converter="DateTime">
          <Compute.Expr>
            <![CDATA[
              @{
                long epoch = Convert.ToInt64(Model.Inp);
                System.DateTime dtDateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
                dtDateTime = dtDateTime.AddMilliseconds(epoch);
                string formatted = dtDateTime.ToString();
              }
              @(formatted)
            ]]>
          </Compute.Expr>
          <JsonPath Expr="time" Id="Inp" DefaultValue=""/>
        </Compute>
        <JsonPath Expr="isBuyerMaker" Id="BuyerIsMaker" Title="Buyer is Maker" Converter="Bool"/>
        <JsonPath Expr="isBestMatch" Id="IsBestMatch" Title="Best Match" Converter="Bool"/>
      </JsonPath>
    </Parse>
    <Resource Id="Error"/>
  </RestConnector>

  <RestConnector Id="AggregateTradesList" Title="Aggregate Trades List" HelpText="List compressed, aggregate trades" HelpUrl="https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list">
    <Parameters>
      <Text Id="Symbol" Title="Trading pair symbol (e.g. ETHBTC)" DefaultValue="" Required="true" Select.Connector="ListSymbolsHidden" Select.IdField="Symbol" Select.TitleField="SymbolName" Debug.DefaultValue="ETHBTC"/>
      <Number Id="Limit" Title="Limit (increments of 5)" DefaultValue="500" Min="5" Max="500" Required="false" HelpText=""/>
    </Parameters>
    <Fetch>
      <Fetch.Url>
        <![CDATA[
        https://api.binance.com/api/v1/aggTrades?
        symbol=@Model.Symbol
        @if(Model.Limit % 5 == 0)
        {
          @: &limit=@Model.Limit
        }
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.*" Id="Trades">
        <JsonPath Expr="a" Id="AggregateTradeId" Title="Aggregate Trade Id" Converter="Int" Checked="False"/>
        <JsonPath Expr="p" Id="Price" Title="Price" Converter="Double"/>
        <JsonPath Expr="q" Id="Quantity" Title="Quantity" Converter="Double"/>
        <JsonPath Expr="f" Id="FirstTradeId" Title="First Trade Id" Converter="Int" Checked="False"/>
        <JsonPath Expr="l" Id="LastTradeId" Title="Last Trade Id" Converter="Int" Checked="False"/>
        <Compute Id="Time" Title="Time" Converter="DateTime">
          <Compute.Expr>
            <![CDATA[
             @{
                long epoch = Convert.ToInt64(Model.Inp);
                System.DateTime dtDateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
                dtDateTime = dtDateTime.AddMilliseconds(epoch);
                string formatted = dtDateTime.ToString();
              }
              @(formatted)
            ]]>
          </Compute.Expr>
          <JsonPath Expr="T" Id="Inp" DefaultValue=""/>
        </Compute>
        <JsonPath Expr="m" Id="BuyerIsMaker" Title="Buyer is Maker" Converter="Bool"/>
        <JsonPath Expr="M" Id="IsBestMatch" Title="Best Match" Converter="Bool"/>
      </JsonPath>
    </Parse>
    <Resource Id="Error"/>
  </RestConnector>

  <RestConnector Id="TwentyFourHourStatistics" Title="24hr price change statistics for symbol" HelpUrl="https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#24hr-ticker-price-change-statistics">
    <Parameters>
      <Text Id="Symbol" Title="Trading pair symbol (e.g. ETHBTC)" DefaultValue="" Required="false" Select.Connector="ListSymbolsHidden" Select.IdField="Symbol" Select.TitleField="SymbolName" Debug.DefaultValue="ETHBTC"/>
    </Parameters>
    <Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestHeaders>
          <Header Name='X-MBX-APIKEY'>@(Model.ApiKey)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.binance.com/api/v1/ticker/24hr
        @if(!string.IsNullOrEmpty(Model.Symbol)){
         @: ?symbol=@Model.Symbol
        }
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="symbol" Id="symbol" Title="Symbol" Converter="String"/>
      <JsonPath Expr="priceChange" Id="PriceChange" Title="Price Change" Converter="Double"/>
      <JsonPath Expr="priceChangePercent" Id="PriceChangePercent" Title="Price Change Percent" Converter="Double"/>
      <JsonPath Expr="weightedAvgPrice" Id="WeightedAvgPrice" Title="Weighted Avg Price" Converter="Double"/>
      <JsonPath Expr="prevClosePrice" Id="PrevClosePrice" Title="Prev Close Price" Converter="Double"/>
      <JsonPath Expr="lastPrice" Id="LastPrice" Title="Last Price" Converter="Double"/>
      <JsonPath Expr="lastQty" Id="LastQty" Title="Last Qty" Converter="Double"/>
      <JsonPath Expr="bidPrice" Id="BidPrice" Title="Bid Price" Converter="Double"/>
      <JsonPath Expr="bidQty" Id="BidQty" Title="Bid Qty" Converter="Double"/>
      <JsonPath Expr="askPrice" Id="AskPrice" Title="Ask Price" Converter="Double"/>
      <JsonPath Expr="askQty" Id="AskQty" Title="Ask Qty" Converter="Double"/>
      <JsonPath Expr="openPrice" Id="OpenPrice" Title="Open Price" Converter="Double"/>
      <JsonPath Expr="highPrice" Id="HighPrice" Title="High Price" Converter="Double"/>
      <JsonPath Expr="lowPrice" Id="LowPrice" Title="Low Price" Converter="Double"/>
      <JsonPath Expr="volume" Id="Volume" Title="Volume" Converter="Double"/>
      <JsonPath Expr="quoteVolume" Id="QuoteVolume" Title="Quote Volume" Converter="Double"/>
      <JsonPath Expr="firstId" Id="FirstId" Title="First Id" Converter="Int" Checked="False"/>
      <JsonPath Expr="lastId" Id="LastId" Title="Last Id" Converter="Int" Checked="False"/>
      <JsonPath Expr="count" Id="Count" Title="Count" Converter="Int"/>
      <Compute Id="OpenTime" Title="Open Time" Converter="DateTime" Checked="False">
        <Compute.Expr>
          <![CDATA[
             @{
                long epoch = Convert.ToInt64(Model.Inp);
                System.DateTime dtDateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
                dtDateTime = dtDateTime.AddMilliseconds(epoch);
                string formatted = dtDateTime.ToString();
              }
              @(formatted)
            ]]>
        </Compute.Expr>
        <JsonPath Expr="openTime" Id="Inp" DefaultValue=""/>
      </Compute>
      <Compute Id="CloseTime" Title="Close Time" Converter="DateTime">
        <Compute.Expr>
          <![CDATA[
             @{
                long epoch = Convert.ToInt64(Model.Inp);
                System.DateTime dtDateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
                dtDateTime = dtDateTime.AddMilliseconds(epoch);
                string formatted = dtDateTime.ToString();
              }
              @(formatted)
            ]]>
        </Compute.Expr>
        <JsonPath Expr="closeTime" Id="Inp" DefaultValue="" Checked="False"/>
      </Compute>
    </Parse>
    <Resource Id="Error"/>
  </RestConnector>

  <RestConnector Id="TwentyFourHourStatisticsAll" Title="24hr price change statistics (all symbols)" HelpUrl="https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#24hr-ticker-price-change-statistics">
    <Fetch>
      <Fetch.Url>
        <![CDATA[
        https://api.binance.com/api/v1/ticker/24hr
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.*" Id="Trades">
        <JsonPath Expr="symbol" Id="symbol" Title="Symbol" Converter="String"/>
        <JsonPath Expr="priceChange" Id="PriceChange" Title="Price Change" Converter="Double"/>
        <JsonPath Expr="priceChangePercent" Id="PriceChangePercent" Title="Price Change Percent" Converter="Double"/>
        <JsonPath Expr="weightedAvgPrice" Id="WeightedAvgPrice" Title="Weighted Avg Price" Converter="Double"/>
        <JsonPath Expr="prevClosePrice" Id="PrevClosePrice" Title="Prev Close Price" Converter="Double"/>
        <JsonPath Expr="lastPrice" Id="LastPrice" Title="Last Price" Converter="Double"/>
        <JsonPath Expr="lastQty" Id="LastQty" Title="Last Qty" Converter="Double"/>
        <JsonPath Expr="bidPrice" Id="BidPrice" Title="Bid Price" Converter="Double"/>
        <JsonPath Expr="bidQty" Id="BidQty" Title="Bid Qty" Converter="Double"/>
        <JsonPath Expr="askPrice" Id="AskPrice" Title="Ask Price" Converter="Double"/>
        <JsonPath Expr="askQty" Id="AskQty" Title="Ask Qty" Converter="Double"/>
        <JsonPath Expr="openPrice" Id="OpenPrice" Title="Open Price" Converter="Double"/>
        <JsonPath Expr="highPrice" Id="HighPrice" Title="High Price" Converter="Double"/>
        <JsonPath Expr="lowPrice" Id="LowPrice" Title="Low Price" Converter="Double"/>
        <JsonPath Expr="volume" Id="Volume" Title="Volume" Converter="Double"/>
        <JsonPath Expr="quoteVolume" Id="QuoteVolume" Title="Quote Volume" Converter="Double"/>
        <JsonPath Expr="firstId" Id="FirstId" Title="First Id" Converter="Int" Checked="False"/>
        <JsonPath Expr="lastId" Id="LastId" Title="Last Id" Converter="Int" Checked="False"/>
        <JsonPath Expr="count" Id="Count" Title="Count" Converter="Int"/>
        <Compute Id="OpenTime" Title="Open Time" Converter="DateTime" Checked="False">
          <Compute.Expr>
            <![CDATA[
             @{
                long epoch = Convert.ToInt64(Model.Inp);
                System.DateTime dtDateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
                dtDateTime = dtDateTime.AddMilliseconds(epoch);
                string formatted = dtDateTime.ToString();
              }
              @(formatted)
            ]]>
          </Compute.Expr>
          <JsonPath Expr="openTime" Id="Inp" DefaultValue=""/>
        </Compute>
        <Compute Id="CloseTime" Title="Close Time" Converter="DateTime">
          <Compute.Expr>
            <![CDATA[
             @{
                long epoch = Convert.ToInt64(Model.Inp);
                System.DateTime dtDateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
                dtDateTime = dtDateTime.AddMilliseconds(epoch);
                string formatted = dtDateTime.ToString();
              }
              @(formatted)
            ]]>
          </Compute.Expr>
          <JsonPath Expr="closeTime" Id="Inp" DefaultValue="" Checked="False"/>
        </Compute>
      </JsonPath>
    </Parse>
    <Resource Id="Error"/>
  </RestConnector>

  <RestConnector Id="CandlesticData" Title="Candlestick Data" HelpText="Kline/candlestick bars for a symbol" HelpUrl="https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#klinecandlestick-data">
    <Parameters>
      <Text Id="Symbol" Title="Trading pair symbol (e.g. ETHBTC)" DefaultValue="" Required="true" Select.Connector="ListSymbolsHidden" Select.IdField="Symbol" Select.TitleField="SymbolName" Debug.DefaultValue="ETHBTC"/>
      <Select Id="Interval" Title="Chart interval" Required="true" DefaultValue="1m">
        <DataSource>
          <Resource Id="Intervals"/>
        </DataSource>
      </Select>
      <Number Id="Limit" Title="Limit (increments of 5)" DefaultValue="500" Min="5" Max="500" Required="false" HelpText=""/>
    </Parameters>
    <Fetch>
      <Fetch.Url>
        <![CDATA[
        https://api.binance.com/api/v1/klines?
        symbol=@(Model.Symbol)
        &interval=@(Model.Interval)
        @if(Model.Limit % 5 == 0)
        {
          @: &limit=@Model.Limit
        }
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.*" Id="Trades">
        <Compute Id="OpenTime" Title="Open Time" Converter="DateTime">
          <Compute.Expr>
            <![CDATA[
             @{
                long epoch = Convert.ToInt64(Model.Inp);
                System.DateTime dtDateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
                dtDateTime = dtDateTime.AddMilliseconds(epoch);
                string formatted = dtDateTime.ToString();
              }
              @(formatted)
            ]]>
          </Compute.Expr>
          <JsonPath Expr="$.[0" Id="Inp" DefaultValue="" Checked="False"/>
        </Compute>
        <JsonPath Expr="$.[5]" Id="Volume" Title="Volume" Converter="Double"/>
        <JsonPath Expr="$.[1]" Id="Open" Title="Open" Converter="Double"/>
        <JsonPath Expr="$.[2]" Id="High" Title="High" Converter="Double"/>
        <JsonPath Expr="$.[3]" Id="Low" Title="Low" Converter="Double"/>
        <JsonPath Expr="$.[4]" Id="Close" Title="Close" Converter="Double"/>
        <Compute Id="CloseTime" Title="Close Time" Converter="DateTime">
          <Compute.Expr>
            <![CDATA[
             @{
                long epoch = Convert.ToInt64(Model.Inp);
                System.DateTime dtDateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
                dtDateTime = dtDateTime.AddMilliseconds(epoch);
                string formatted = dtDateTime.ToString();
              }
              @(formatted)
            ]]>
          </Compute.Expr>
          <JsonPath Expr="$.[6]" Id="Inp" DefaultValue="" Checked="False"/>
        </Compute>
        <JsonPath Expr="$.[7]" Id="QuoteAssetVolume" Title="Quote Asset Volume" Converter="Double"/>
        <JsonPath Expr="$.[8]" Id="NumberOfTrades" Title="Number of Trades" Converter="Int"/>
        <JsonPath Expr="$.[9]" Id="TakerBuyBaseAssetVolume" Title="Taker Buy Base Asset Volume" Converter="Double"/>
        <JsonPath Expr="$.[10]" Id="TakerBuyQuoteAssetVolume" Title="Taker Buy Quote Asset Volume" Converter="Double"/>
      </JsonPath>
    </Parse>
    <Resource Id="Error"/>
  </RestConnector>

  <RestConnector Id="OpenOrders" Title="Open Orders (User data)" HelpText="Get all currently open orders" HelpUrl="https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#current-open-orders-user_data">
    <Parameters>
      <Text Id="Symbol" Title="Trading pair symbol (e.g. ETHBTC)" DefaultValue="" Required="false" Select.Connector="ListSymbolsHidden" Select.IdField="Symbol" Select.TitleField="SymbolName" Debug.DefaultValue="BNBBTC"/>
    </Parameters>
    <Fetch>
      <HttpSettings>
        <RequestMethod>GET</RequestMethod>
        <RequestHeaders>
          <Header Name='X-MBX-APIKEY'>@(Model.ApiKey)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        @{
          string additionalParams = "";
          if(!string.IsNullOrEmpty(Model.Symbol)){
           additionalParams  += "&symbol=" + Model.Symbol;
          }
        }
        https://api.binance.com/api/v3/openOrders?
        @GetCompleteQueryString(additionalParams)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.*" Id="Orders">
        <JsonPath Expr="symbol" Id="Symbol" Title="Symbol" Converter="String"/>
        <JsonPath Expr="orderId" Id="OrderId" Title="Order ID" Converter="Int"/>
        <JsonPath Expr="clientOrderId" Id="ClientOrderId" Title="Client Order Id" Converter="String" Checked="false"/>
        <JsonPath Expr="price" Id="Price" Title="Price" Converter="Double"/>
        <JsonPath Expr="origQty" Id="origQty" Title="Original Quantity" Converter="Double"/>
        <JsonPath Expr="executedQty" Id="ExecutedQty" Title="Executed Quantity" Converter="Double"/>
        <JsonPath Expr="status" Id="Status" Title="Status" Converter="String"/>
        <JsonPath Expr="timeInForce" Id="TimeInForce" Title="Time In Force" Converter="String"/>
        <JsonPath Expr="type" Id="Type" Title="Type" Converter="String"/>
        <JsonPath Expr="side" Id="Side" Title="Side" Converter="String"/>
        <JsonPath Expr="stopPrice" Id="StopPrice" Title="Stop Price" Converter="Double"/>
        <JsonPath Expr="icebergQty" Id="IcebergQty" Title="Iceberg Quantity" Converter="Double" Checked="False"/>
        <Compute Id="Time" Title="Time" Converter="DateTime">
          <Compute.Expr>
            <![CDATA[
             @{
                long epoch = Convert.ToInt64(Model.Inp);
                System.DateTime dtDateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
                dtDateTime = dtDateTime.AddMilliseconds(epoch);
                string formatted = dtDateTime.ToString();
              }
              @(formatted)
            ]]>
          </Compute.Expr>
          <JsonPath Expr="time" Id="Inp" DefaultValue=""/>
        </Compute>
        <JsonPath Expr="isWorking" Id="IsWorking" Title="Working" Converter="Bool"/>
      </JsonPath>
    </Parse>
    <Resource Id="Error"/>
  </RestConnector>

  <RestConnector Id="AllOrders" Title="All Orders (User data)" HelpText="Get all account orders; active, canceled, or filled." HelpUrl="https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#all-orders-user_data">
    <Parameters>
      <Text Id="Symbol" Title="Trading pair symbol (e.g. ETHBTC)" DefaultValue="" Required="true" Select.Connector="ListSymbolsHidden" Select.IdField="Symbol" Select.TitleField="SymbolName" Debug.DefaultValue="BNBBTC"/>
      <Number Id="Limit" Title="Limit (increments of 5)" DefaultValue="500" Min="5" Max="500" Required="true" HelpText="Limit of records to retrieve"/>
    </Parameters>
    <Fetch>
      <HttpSettings>
        <RequestMethod>GET</RequestMethod>
        <RequestHeaders>
          <Header Name='X-MBX-APIKEY'>@(Model.ApiKey)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        @{
          string additionalParams = "&limit=" + Model.Limit;
          if(!string.IsNullOrEmpty(Model.Symbol)){
           additionalParams  += "&symbol=" + Model.Symbol;
          }
        }
        https://api.binance.com/api/v3/allOrders?
        @GetCompleteQueryString(additionalParams)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.*" Id="Orders">
        <JsonPath Expr="symbol" Id="Symbol" Title="Symbol" Converter="String"/>
        <JsonPath Expr="orderId" Id="OrderId" Title="Order ID" Converter="Int"/>
        <JsonPath Expr="clientOrderId" Id="ClientOrderId" Title="Client Order Id" Converter="String" Checked="false"/>
        <JsonPath Expr="price" Id="Price" Title="Price" Converter="Double"/>
        <JsonPath Expr="origQty" Id="origQty" Title="Original Quantity" Converter="Double"/>
        <JsonPath Expr="executedQty" Id="ExecutedQty" Title="Executed Quantity" Converter="Double"/>
        <JsonPath Expr="status" Id="Status" Title="Status" Converter="String"/>
        <JsonPath Expr="timeInForce" Id="TimeInForce" Title="Time In Force" Converter="String"/>
        <JsonPath Expr="type" Id="Type" Title="Type" Converter="String"/>
        <JsonPath Expr="side" Id="Side" Title="Side" Converter="String"/>
        <JsonPath Expr="stopPrice" Id="StopPrice" Title="Stop Price" Converter="Double"/>
        <JsonPath Expr="icebergQty" Id="IcebergQty" Title="Iceberg Quantity" Converter="Double" Checked="False"/>
        <Compute Id="Time" Title="Time" Converter="DateTime">
          <Compute.Expr>
            <![CDATA[
             @{
                long epoch = Convert.ToInt64(Model.Inp);
                System.DateTime dtDateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
                dtDateTime = dtDateTime.AddMilliseconds(epoch);
                string formatted = dtDateTime.ToString();
              }
              @(formatted)
            ]]>
          </Compute.Expr>
          <JsonPath Expr="time" Id="Inp" DefaultValue=""/>
        </Compute>
        <JsonPath Expr="isWorking" Id="IsWorking" Title="Working" Converter="Bool"/>
      </JsonPath>
    </Parse>
    <Resource Id="Error"/>
  </RestConnector>

  <RestConnector Id="AccountInformation" Title="Account Information (User data)" HelpText="Get current account information." HelpUrl="https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#account-information-user_data">
    <Fetch>
      <HttpSettings>
        <RequestMethod>GET</RequestMethod>
        <RequestHeaders>
          <Header Name='X-MBX-APIKEY'>@(Model.ApiKey)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.binance.com/api/v3/account?
        @GetCompleteQueryString()
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="makerCommission" Id="MakerCommision" Title="Maker Commision" Converter="Double"/>
      <JsonPath Expr="takerCommission" Id="TakerCommision" Title="Taker Commision" Converter="Double"/>
      <JsonPath Expr="buyerCommission" Id="BuyerCommission" Title="Buyer Commission" Converter="Double"/>
      <JsonPath Expr="sellerCommission" Id="SellerCommission" Title="Seller Commission" Converter="Double"/>
      <JsonPath Expr="canTrade" Id="CanTrade" Title="Can Trade" Converter="Bool"/>
      <JsonPath Expr="canWithdraw" Id="CanWithdraw" Title="Can Withdraw" Converter="Bool"/>
      <JsonPath Expr="canDeposit" Id="CanDeposit" Title="Can Deposit" Converter="Bool"/>
    </Parse>
    <Resource Id="Error"/>
  </RestConnector>

  <RestConnector Id="CurrencyBalances" Title="Currency Balances (User data)" HelpText="Get balances for all owned currencies" HelpUrl="https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#account-information-user_data">
    <Fetch>
      <HttpSettings>
        <RequestMethod>GET</RequestMethod>
        <RequestHeaders>
          <Header Name='X-MBX-APIKEY'>@(Model.ApiKey)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.binance.com/api/v3/account?
        @GetCompleteQueryString()
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.balances.*">
        <Compute Expr="@DateTime.Now" Id="Time" Title="Time" Converter="DateTime">
        </Compute>
        <JsonPath Expr="asset" Id="Asset" Title="Asset" Converter="String"/>
        <JsonPath Expr="free" Id="Free" Title="Free" Converter="Double"/>
        <JsonPath Expr="locked" Id="Locked" Title="Locked" Converter="Double"/>
      </JsonPath>
    </Parse>
    <Resource Id="Error"/>
  </RestConnector>

  <RazorFunctions>
    <![CDATA[
    string GetCompleteQueryString(string additionalParams = ""){
      string completeQuery = "";
      string q = "timestamp=" + GetTimestamp().ToString();
      q += additionalParams;
      string signature = GetSignature(q);

      completeQuery += q + "&signature=" + signature;
      return completeQuery;
    }

    string GetSignature(string q)
    {
      string signature = GetHash(q, Model.SecretKey);
      return signature;
    }

    long GetTimestamp(){
     return DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
    }

    public static String GetHash(String text, String key)
    {
        ASCIIEncoding encoding = new ASCIIEncoding();
        Byte[] textBytes = encoding.GetBytes(text);
        Byte[] keyBytes = encoding.GetBytes(key);

        Byte[] hashBytes;

        using (System.Security.Cryptography.HMACSHA256 hash = new System.Security.Cryptography.HMACSHA256(keyBytes))
            hashBytes = hash.ComputeHash(textBytes);

        return BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
    }

    ]]>
  </RazorFunctions>
</Suite>