<?xml version="1.0" encoding="utf-8" ?>
<Suite Category="Social" Title="LinkedIn" Id="LinkedIn" RequireVersion="9.5.4" LoginButton="https://seotoolsforexcel.com/logins/linkedin.png" SourceUrl="https://github.com/nielsbosma/SeoTools-for-Excel-Connectors/blob/master/LinkedIn.xml" HelpUrl="https://seotoolsforexcel.com/linkedin/"  HelpText="Documentation">

  <Author Name="Victor" Url="http://community.seotoolsforexcel.com/users/diskborste/activity"/>

  <SeoToolsAuthenticator StayAuthenticated="true" Key="linkedin"/>

  <Resources>
    <Resource Id="HttpSettings">
      <HttpSettings>
        <RequestHeaders>
          <Header Name="Authorization">Bearer @(Model.Authenticator.Token)</Header>
        </RequestHeaders>
      </HttpSettings>
    </Resource>
    <Resource Id="Fail">
			<Fail>
        <XPath Expr="//pre"/>
        <JsonPath Expr="$.message"/>
			</Fail>
    </Resource>
    <Resource Id="Pageviews">
			<JsonPath Expr="pageStatistics.views.allPageViews.pageViews" Id="allPageViews" Title="All Pageviews" Converter="Int"/>
			<JsonPath Expr="pageStatistics.views.allDesktopPageViews.pageViews" Id="allDesktopPageViews" Title="Desktop Pageviews" Converter="Int"/>
			<JsonPath Expr="pageStatistics.views.allMobilePageViews.pageViews" Id="allMobilePageViews" Title="Mobile Pageviews" Converter="Int"/>
			<JsonPath Expr="pageStatistics.views.overviewPageViews.pageViews" Id="overviewPageViews" Title="Overview Pageviews" Converter="Int"/>
			<JsonPath Expr="pageStatistics.views.peoplePageViews.pageViews" Id="peoplePageViews" Title="People Pageviews" Converter="Int"/>
			<JsonPath Expr="pageStatistics.views.careersPageViews.pageViews" Id="careersPageViews" Title="Careers Pageviews" Converter="Int"/>
			<JsonPath Expr="pageStatistics.views.aboutPageViews.pageViews" Id="aboutPageViews" Title="About Pageviews" Converter="Int"/>
			<JsonPath Expr="pageStatistics.views.insightsPageViews.pageViews" Id="insightsPageViews" Title="Insights Pageviews" Converter="Int"/>
			<JsonPath Expr="pageStatistics.views.jobsPageViews.pageViews" Id="jobsPageViews" Title="Jobs Pageviews" Converter="Int"/>
			<JsonPath Expr="pageStatistics.views.lifeAtPageViews.pageViews" Id="lifeAtPageViews" Title="Life At Pageviews" Converter="Int"/>
    </Resource>
    <Resource Id="DictFunctions">
			<Compute Id="Function" Title="Job Function">
				<Compute.Expr>
					<![CDATA[
					@{
						string value = "";

						Dictionary<string, string> values = new Dictionary<string, string>();
						values.Add("urn:li:function:-1", "None");
						values.Add("urn:li:function:1", "Accounting");
						values.Add("urn:li:function:2", "Administrative");
						values.Add("urn:li:function:3", "Arts and Design");
						values.Add("urn:li:function:4", "Business Development");
						values.Add("urn:li:function:5", "Community & Social Services");
						values.Add("urn:li:function:6", "Consulting");
						values.Add("urn:li:function:7", "Education");
						values.Add("urn:li:function:8", "Engineering");
						values.Add("urn:li:function:9", "Entrepreneurship");
						values.Add("urn:li:function:10", "Finance");
						values.Add("urn:li:function:11", "Healthcare Services");
						values.Add("urn:li:function:12", "Human Resources");
						values.Add("urn:li:function:13", "Information Technology");
						values.Add("urn:li:function:14", "Legal");
						values.Add("urn:li:function:15", "Marketing");
						values.Add("urn:li:function:16", "Media & Communications");
						values.Add("urn:li:function:17", "Military & Protective Services");
						values.Add("urn:li:function:18", "Operations");
						values.Add("urn:li:function:19", "Product Management");
						values.Add("urn:li:function:20", "Program & Product Management");
						values.Add("urn:li:function:21", "Purchasing");
						values.Add("urn:li:function:22", "Quality Assurance");
						values.Add("urn:li:function:23", "Real Estate");
						values.Add("urn:li:function:24", "Rersearch");
						values.Add("urn:li:function:25", "Sales");
						values.Add("urn:li:function:26", "Support");

						string output = (values.TryGetValue(Model.Inp, out value) ? value : "");
					}
					@output
					]]>
				</Compute.Expr>
				<JsonPath Expr="function" Id="Inp"/>
			</Compute>
    </Resource>
    <Resource Id="DictIndustries">
			<Compute Id="Industry" Title="Industry">
				<Compute.Expr>
					<![CDATA[
					@{
						string value = "";

						Dictionary<string, string> values = new Dictionary<string, string>();
						values.Add("urn:li:industry:47", "Accounting");
						values.Add("urn:li:industry:94", "Airlines/Aviation");
						values.Add("urn:li:industry:120", "Alternative Dispute Resolution");
						values.Add("urn:li:industry:125", "Alternative Medicine");
						values.Add("urn:li:industry:127", "Animation");
						values.Add("urn:li:industry:19", "Apparel & Fashion");
						values.Add("urn:li:industry:50", "Architecture & Planning");
						values.Add("urn:li:industry:111", "Arts and Crafts");
						values.Add("urn:li:industry:53", "Automotive");
						values.Add("urn:li:industry:52", "Aviation & Aerospace");
						values.Add("urn:li:industry:41", "Banking");
						values.Add("urn:li:industry:12", "Biotechnology");
						values.Add("urn:li:industry:36", "Broadcast Media");
						values.Add("urn:li:industry:49", "Building Materials");
						values.Add("urn:li:industry:138", "Business Supplies and Equipment");
						values.Add("urn:li:industry:129", "Capital Markets");
						values.Add("urn:li:industry:54", "Chemicals");
						values.Add("urn:li:industry:90", "Civic & Social Organization");
						values.Add("urn:li:industry:51", "Civil Engineering");
						values.Add("urn:li:industry:128", "Commercial Real Estate");
						values.Add("urn:li:industry:118", "Computer & Network Security");
						values.Add("urn:li:industry:109", "Computer Games");
						values.Add("urn:li:industry:3", "Computer Hardware");
						values.Add("urn:li:industry:5", "Computer Networking");
						values.Add("urn:li:industry:4", "Computer Software");
						values.Add("urn:li:industry:48", "Construction");
						values.Add("urn:li:industry:24", "Consumer Electronics");
						values.Add("urn:li:industry:25", "Consumer Goods");
						values.Add("urn:li:industry:91", "Consumer Services");
						values.Add("urn:li:industry:18", "Cosmetics");
						values.Add("urn:li:industry:65", "Dairy");
						values.Add("urn:li:industry:1", "Defense & Space");
						values.Add("urn:li:industry:99", "Design");
						values.Add("urn:li:industry:69", "Education Management");
						values.Add("urn:li:industry:132", "E-Learning");
						values.Add("urn:li:industry:112", "Electrical/Electronic Manufacturing");
						values.Add("urn:li:industry:28", "Entertainment");
						values.Add("urn:li:industry:86", "Environmental Services");
						values.Add("urn:li:industry:110", "Events Services");
						values.Add("urn:li:industry:76", "Executive Office");
						values.Add("urn:li:industry:122", "Facilities Services");
						values.Add("urn:li:industry:63", "Farming");
						values.Add("urn:li:industry:43", "Financial Services");
						values.Add("urn:li:industry:38", "Fine Art");
						values.Add("urn:li:industry:66", "Fishery");
						values.Add("urn:li:industry:34", "Food & Beverages");
						values.Add("urn:li:industry:23", "Food Production");
						values.Add("urn:li:industry:101", "Fund-Raising");
						values.Add("urn:li:industry:26", "Furniture");
						values.Add("urn:li:industry:29", "Gambling & Casinos");
						values.Add("urn:li:industry:145", "Glass, Ceramics & Concrete");
						values.Add("urn:li:industry:75", "Government Administration");
						values.Add("urn:li:industry:148", "Government Relations");
						values.Add("urn:li:industry:140", "Graphic Design");
						values.Add("urn:li:industry:124", "Health, Wellness and Fitness");
						values.Add("urn:li:industry:68", "Higher Education");
						values.Add("urn:li:industry:14", "Hospital & Health Care");
						values.Add("urn:li:industry:31", "Hospitality");
						values.Add("urn:li:industry:137", "Human Resources");
						values.Add("urn:li:industry:134", "Import and Export");
						values.Add("urn:li:industry:88", "Individual & Family Services");
						values.Add("urn:li:industry:147", "Industrial Automation");
						values.Add("urn:li:industry:84", "Information Services");
						values.Add("urn:li:industry:96", "Information Technology and Services");
						values.Add("urn:li:industry:42", "Insurance");
						values.Add("urn:li:industry:74", "International Affairs");
						values.Add("urn:li:industry:141", "International Trade and Development");
						values.Add("urn:li:industry:6", "Internet");
						values.Add("urn:li:industry:45", "Investment Banking");
						values.Add("urn:li:industry:46", "Investment Management");
						values.Add("urn:li:industry:73", "Judiciary");
						values.Add("urn:li:industry:77", "Law Enforcement");
						values.Add("urn:li:industry:9", "Law Practice");
						values.Add("urn:li:industry:10", "Legal Services");
						values.Add("urn:li:industry:72", "Legislative Office");
						values.Add("urn:li:industry:30", "Leisure, Travel & Tourism");
						values.Add("urn:li:industry:85", "Libraries");
						values.Add("urn:li:industry:116", "Logistics and Supply Chain");
						values.Add("urn:li:industry:143", "Luxury Goods & Jewelry");
						values.Add("urn:li:industry:55", "Machinery");
						values.Add("urn:li:industry:11", "Management Consulting");
						values.Add("urn:li:industry:95", "Maritime");
						values.Add("urn:li:industry:97", "Market Research");
						values.Add("urn:li:industry:80", "Marketing and Advertising");
						values.Add("urn:li:industry:135", "Mechanical or Industrial Engineering");
						values.Add("urn:li:industry:126", "Media Production");
						values.Add("urn:li:industry:17", "Medical Devices");
						values.Add("urn:li:industry:13", "Medical Practice");
						values.Add("urn:li:industry:139", "Mental Health Care");
						values.Add("urn:li:industry:71", "Military");
						values.Add("urn:li:industry:56", "Mining & Metals");
						values.Add("urn:li:industry:35", "Motion Pictures and Film");
						values.Add("urn:li:industry:37", "Museums and Institutions");
						values.Add("urn:li:industry:115", "Music");
						values.Add("urn:li:industry:114", "Nanotechnology");
						values.Add("urn:li:industry:81", "Newspapers");
						values.Add("urn:li:industry:100", "Non-Profit Organization Management");
						values.Add("urn:li:industry:57", "Oil & Energy");
						values.Add("urn:li:industry:113", "Online Media");
						values.Add("urn:li:industry:123", "Outsourcing/Offshoring");
						values.Add("urn:li:industry:87", "Package/Freight Delivery");
						values.Add("urn:li:industry:146", "Packaging and Containers");
						values.Add("urn:li:industry:61", "Paper & Forest Products");
						values.Add("urn:li:industry:39", "Performing Arts");
						values.Add("urn:li:industry:15", "Pharmaceuticals");
						values.Add("urn:li:industry:131", "Philanthropy");
						values.Add("urn:li:industry:136", "Photography");
						values.Add("urn:li:industry:117", "Plastics");
						values.Add("urn:li:industry:107", "Political Organization");
						values.Add("urn:li:industry:67", "Primary/Secondary Education");
						values.Add("urn:li:industry:83", "Printing");
						values.Add("urn:li:industry:105", "Professional Training & Coaching");
						values.Add("urn:li:industry:102", "Program Development");
						values.Add("urn:li:industry:79", "Public Policy");
						values.Add("urn:li:industry:98", "Public Relations and Communications");
						values.Add("urn:li:industry:78", "Public Safety");
						values.Add("urn:li:industry:82", "Publishing");
						values.Add("urn:li:industry:62", "Railroad Manufacture");
						values.Add("urn:li:industry:64", "Ranching");
						values.Add("urn:li:industry:44", "Real Estate");
						values.Add("urn:li:industry:40", "Recreational Facilities and Services");
						values.Add("urn:li:industry:89", "Religious Institutions");
						values.Add("urn:li:industry:144", "Renewables & Environment");
						values.Add("urn:li:industry:70", "Research");
						values.Add("urn:li:industry:32", "Restaurants");
						values.Add("urn:li:industry:27", "Retail");
						values.Add("urn:li:industry:121", "Security and Investigations");
						values.Add("urn:li:industry:7", "Semiconductors");
						values.Add("urn:li:industry:58", "Shipbuilding");
						values.Add("urn:li:industry:20", "Sporting Goods");
						values.Add("urn:li:industry:33", "Sports");
						values.Add("urn:li:industry:104", "Staffing and Recruiting");
						values.Add("urn:li:industry:22", "Supermarkets");
						values.Add("urn:li:industry:8", "Telecommunications");
						values.Add("urn:li:industry:60", "Textiles");
						values.Add("urn:li:industry:130", "Think Tanks");
						values.Add("urn:li:industry:21", "Tobacco");
						values.Add("urn:li:industry:108", "Translation and Localization");
						values.Add("urn:li:industry:92", "Transportation/Trucking/Railroad");
						values.Add("urn:li:industry:59", "Utilities");
						values.Add("urn:li:industry:106", "Venture Capital & Private Equity");
						values.Add("urn:li:industry:16", "Veterinary");
						values.Add("urn:li:industry:93", "Warehousing");
						values.Add("urn:li:industry:133", "Wholesale");
						values.Add("urn:li:industry:142", "Wine and Spirits");
						values.Add("urn:li:industry:119", "Wireless");
						values.Add("urn:li:industry:103", "Writing and Editing");

						string output = (values.TryGetValue(Model.Inp, out value) ? value : "");
					}
					@output
					]]>
				</Compute.Expr>
				<JsonPath Expr="industry" Id="Inp"/>
			</Compute>
    </Resource>
    <Resource Id="DictSeniority">
			<Compute Id="Seniority" Title="Seniority">
				<Compute.Expr>
					<![CDATA[
					@{
						string value = "";

						Dictionary<string, string> values = new Dictionary<string, string>();
						values.Add("urn:li:seniority:1", "Unpaid");
						values.Add("urn:li:seniority:2", "Training");
						values.Add("urn:li:seniority:3", "Entry-level");
						values.Add("urn:li:seniority:4", "Senior");
						values.Add("urn:li:seniority:5", "Manager");
						values.Add("urn:li:seniority:6", "Director");
						values.Add("urn:li:seniority:7", "Vice President (VP)");
						values.Add("urn:li:seniority:8", "Chief X Officer (CxO)");
						values.Add("urn:li:seniority:9", "Partner");
						values.Add("urn:li:seniority:10", "Owner");

						string output = (values.TryGetValue(Model.Inp, out value) ? value : "");
					}
					@output
					]]>
				</Compute.Expr>
				<JsonPath Expr="seniority" Id="Inp"/>
			</Compute>
    </Resource>
  </Resources>

  <RestConnector Id="CompanyPagesHidden" Hidden="true">
    <Fetch>
			<Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
        https://api.linkedin.com/v2/organizationalEntityAcls?state=APPROVED&q=roleAssignee
				&projection=(elements*(*, organizationalTarget~(localizedName)))
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="elements[*]">
        <Compute Id="Id">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\d+$");
              Match match = regex.Match(Model.Inp);
            }
            @(match.Groups[0].Value)
            ]]>
          </Compute.Expr>
					<JsonPath Expr="organizationalTarget" Id="Inp" Title="Page Id"/>
				</Compute>
        <JsonPath Expr="['organizationalTarget~'].localizedName" Id="Name" Title="Page Name"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="UpdatesList" Title="Updates List" Group="Updates" HelpText="Returns a list of update events from the from the Company page.">
    <Parameters>
      <Text Id="CompanyId" Title="Company Id" Required="true" Debug.DefaultValue="69208" Select.Connector="CompanyPagesHidden"/>
    </Parameters>
    <Paging PageSize="100" EvenPages="false"/>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name="Authorization">Bearer @(Model.Authenticator.Token)</Header>
					<Header Name="X-Restli-Protocol-Version">2.0.0</Header>
					<Header Name="LinkedIn-Version">202307</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.linkedin.com/rest/posts?author=urn%3Ali%3Aorganization%3A@(Model.CompanyId)&q=author
				&count=@(Model.PageCursor.NextTake)&start=@(Model.PageCursor.NextSkip)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.elements[*]">
        <Compute Expr="https://www.linkedin.com/feed/update/@(Model.Inp" Id="URL">
					<JsonPath Expr="id" Id="Inp"/>
				</Compute>
        <JsonPath Expr="id" Id="Id" Title="Id" Converter="String"/>
        <JsonPath Expr="publishedAt" Id="Published" Title="Published" Converter="DateTime" Converter.SourceFormat="UnixMs" DefaultValue=""/>
        <JsonPath Expr="createdAt" Id="Created" Title="Created" Converter="DateTime" Converter.SourceFormat="UnixMs" DefaultValue=""/>
        <JsonPath Expr="lastModifiedAt" Id="Modified" Title="Modified" Converter="DateTime" Converter.SourceFormat="UnixMs" DefaultValue=""/>
        <JsonPath Expr="commentary" Id="Commantary" Title="Commantary" Converter="String"/>
        <Compute Id="Type" Title="Type">
          <Compute.Expr>
            <![CDATA[
            @(Model.Inp.Contains("Post") ? "Post" : "Share")
            ]]>
          </Compute.Expr>
          <JsonPath Expr="id" Id="Inp"/>
        </Compute>
        <JsonPath Expr="content.article.title" Id="ArticleTitle" Title="Article Title" Converter="String" DefaultValue=""/>
        <JsonPath Expr="content.article.description" Id="ArticleDescription" Title="Article Description" Converter="String" DefaultValue=""/>
        <JsonPath Expr="content.article.source" Id="ArticleSource" Title="Article Source" Converter="String" DefaultValue=""/>
        <JsonPath Expr="lifecycleState" Id="State" Title="State" Converter="String"/>
        <JsonPath Expr="author" Id="Author" Title="Author" Converter="String"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="UpdatesComments" Title="Updates Comments" Group="Updates" HelpText="Return all of the comments for the company update.">
    <Parameters>
      <Text Id="UpdateId" Title="Status Update Id" Required="true" Debug.DefaultValue="urn:li:activity:6523482420854034432"/>
    </Parameters>
    <Paging PageSize="50" EvenPages="true">
      <Parse>
        <JsonPath Id="AvaliableRows" Expr="paging.total"/>
      </Parse>
    </Paging>
    <Fetch>
      <Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
				https://api.linkedin.com/v2/socialActions/@(Model.UpdateId)/comments
				?count=@(Model.PageCursor.NextTake)&start=@(Model.PageCursor.NextSkip)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.elements[*]">
        <JsonPath Expr="object" Id="Id" Title="Id" Converter="String"/>
        <JsonPath Expr="created.time" Id="Published" Title="Published" Converter="DateTime" Converter.SourceFormat="UnixMs" DefaultValue=""/>
        <JsonPath Expr="message.text" Id="Text" Title="Text" Converter="String"/>
        <JsonPath Expr="actor" Id="Actor" Title="Actor" Converter="String"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="UpdatesLikes" Title="Updates Likes" Group="Updates" HelpText="Return all of the likes for the company update.">
    <Parameters>
      <Text Id="UpdateId" Title="Status Update Id" Required="true" Debug.DefaultValue="urn:li:activity:6523482420854034432"/>
    </Parameters>
    <Paging PageSize="50" EvenPages="true">
      <Parse>
        <JsonPath Id="AvaliableRows" Expr="paging.total"/>
      </Parse>
    </Paging>
    <Fetch>
      <Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
				https://api.linkedin.com/v2/socialActions/@(Model.UpdateId)/likes
				?count=@(Model.PageCursor.NextTake)&start=@(Model.PageCursor.NextSkip)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.elements[*]">
        <JsonPath Expr="object" Id="Id" Title="Id" Converter="String"/>
        <JsonPath Expr="created.time" Id="Published" Title="Published" Converter="DateTime" Converter.SourceFormat="UnixMs" DefaultValue=""/>
        <JsonPath Expr="actor" Id="Actor" Title="Actor" Converter="String"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="FollowersHistory" Title="Followers History" Group="Followers" HelpText="Returns a follower count for both paid and organic followers within all of the days or months in the selected date range.">
    <Parameters>
      <Text Id="CompanyId" Title="Company Id" Required="true" Debug.DefaultValue="10887127" Select.Connector="CompanyPagesHidden"/>
      <Select Id="Granularity" Title="Granularity" DefaultValue="DAY" Required="true" HelpText="Granularity of the statistics">
        <DataSource>
          <Item Id="DAY" Title="Day"/>
          <Item Id="MONTH" Title="Month"/>
        </DataSource>
      </Select>
      <DateInterval Id="Period" Title="Period" Required="true"/>
    </Parameters>
    <Fetch>
			<Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
        https://api.linkedin.com/v2/organizationalEntityFollowerStatistics?q=organizationalEntity&organizationalEntity=urn:li:organization:@(Model.CompanyId)
				&timeIntervals.timeGranularityType=@(Model.Granularity)
				&timeIntervals.timeRange.start=@(((DateTimeOffset)Model.Period.StartDate.AddHours(1)).ToUnixTimeMilliseconds())
				&timeIntervals.timeRange.end=@(((DateTimeOffset)Model.Period.EndDate.AddDays(1).AddHours(1)).ToUnixTimeMilliseconds())
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.elements[*]">
        <JsonPath Expr="timeRange.start" Id="Period" Title="Period" Converter="DateTime" Converter.SourceFormat="UnixMs" DefaultValue=""/>
        <JsonPath Expr="followerGains.organicFollowerGain" Id="OrganicGain" Title="Organic Gain" Converter="Int"/>
        <JsonPath Expr="followerGains.paidFollowerGain" Id="Paid Gain" Title="Paid Gain" Converter="Int"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="FollowersCompanySize" Title="Followers by Company Size" Group="Followers">
    <Parameters>
      <Text Id="CompanyId" Title="Company Id" Required="true" Debug.DefaultValue="10887127" Select.Connector="CompanyPagesHidden"/>
    </Parameters>
    <Fetch>
			<Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
				https://api.linkedin.com/v2/organizationalEntityFollowerStatistics?q=organizationalEntity
				&organizationalEntity=urn:li:organization:@(Model.CompanyId)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.elements[0].followerCountsByStaffCountRange[*]">
        <JsonPath Expr="staffCountRange" Id="Range" Title="Staff Range" Converter="String"/>
        <JsonPath Expr="followerCounts.organicFollowerCount" Id="Organic" Title="Organic" Converter="Auto"/>
        <JsonPath Expr="followerCounts.paidFollowerCount" Id="Paid" Title="Paid" Converter="Auto"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="FollowersFunction" Title="Followers by Job Function" Group="Followers">
    <Parameters>
      <Text Id="CompanyId" Title="Company Id" Required="true" Debug.DefaultValue="10887127" Select.Connector="CompanyPagesHidden"/>
    </Parameters>
    <Fetch>
			<Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
				https://api.linkedin.com/v2/organizationalEntityFollowerStatistics?q=organizationalEntity
				&organizationalEntity=urn:li:organization:@(Model.CompanyId)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.elements[0].followerCountsByFunction[*]">
				<Resource Id="DictFunctions"/>
        <JsonPath Expr="followerCounts.organicFollowerCount" Id="Organic" Title="Organic" Converter="Auto"/>
        <JsonPath Expr="followerCounts.paidFollowerCount" Id="Paid" Title="Paid" Converter="Auto"/>
			</JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="FollowersIndustry" Title="Followers by Industry" Group="Followers">
    <Parameters>
      <Text Id="CompanyId" Title="Company Id" Required="true" Debug.DefaultValue="10887127" Select.Connector="CompanyPagesHidden"/>
    </Parameters>
    <Fetch>
			<Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
				https://api.linkedin.com/v2/organizationalEntityFollowerStatistics?q=organizationalEntity
				&organizationalEntity=urn:li:organization:@(Model.CompanyId)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.elements[0].followerCountsByIndustry[*]">
				<Resource Id="DictIndustries"/>
        <JsonPath Expr="followerCounts.organicFollowerCount" Id="Organic" Title="Organic" Converter="Auto"/>
        <JsonPath Expr="followerCounts.paidFollowerCount" Id="Paid" Title="Paid" Converter="Auto"/>
			</JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="FollowersSeniority" Title="Followers by Seniority" Group="Followers">
    <Parameters>
      <Text Id="CompanyId" Title="Company Id" Required="true" Debug.DefaultValue="10887127" Select.Connector="CompanyPagesHidden"/>
    </Parameters>
    <Fetch>
			<Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
				https://api.linkedin.com/v2/organizationalEntityFollowerStatistics?q=organizationalEntity
				&organizationalEntity=urn:li:organization:@(Model.CompanyId)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.elements[0].followerCountsBySeniority[*]">
				<Resource Id="DictSeniority"/>
        <JsonPath Expr="followerCounts.organicFollowerCount" Id="Organic" Title="Organic" Converter="Auto"/>
        <JsonPath Expr="followerCounts.paidFollowerCount" Id="Paid" Title="Paid" Converter="Auto"/>
			</JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="FollowersCountry" Title="Followers by Country" Group="Followers">
    <Parameters>
      <Text Id="CompanyId" Title="Company Id" Required="true" Debug.DefaultValue="10887127" Select.Connector="CompanyPagesHidden"/>
    </Parameters>
    <Fetch>
			<Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
				https://api.linkedin.com/v2/organizationalEntityFollowerStatistics?q=organizationalEntity
				&organizationalEntity=urn:li:organization:@(Model.CompanyId)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.elements[0].followerCountsByCountry[*]">
        <Compute Id="Country" Title="Country">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\w{2}$");
              Match match = regex.Match(Model.Inp);
            }
            @Utils.IsoCountryCodeToName(match.Groups[0].Value)
            ]]>
          </Compute.Expr>
					<JsonPath Expr="country" Id="Inp" DefaultValue=""/>
				</Compute>
        <JsonPath Expr="followerCounts.organicFollowerCount" Id="Organic" Title="Organic" Converter="Auto"/>
        <JsonPath Expr="followerCounts.paidFollowerCount" Id="Paid" Title="Paid" Converter="Auto"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="BatchUpdateStats" Title="Batch Update Stats" Group="Updates Statistics">
    <Parameters>
      <Text Id="CompanyId" Title="Company Id" Required="true" Debug.DefaultValue="69208" Select.Connector="CompanyPagesHidden"/>
      <Text Id="Ids" Title="Update Ids" Required="true" Debug.DefaultValue="urn:li:share:6516689386464112640" HelpText="Enter one or more Share Ids separated by a new line" Multiline="true"/>
    </Parameters>
    <Batch Parameter="Ids" Separator="\n" ItemsPerBatch="50"/>
    <Fetch>
			<Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
        https://api.linkedin.com/v2/organizationalEntityShareStatistics?q=organizationalEntity&organizationalEntity=urn:li:organization:@(Model.CompanyId)&@FetchBatchString()
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.elements[*]">
        <Compute Expr="https://www.linkedin.com/feed/update/@GetShareOrUGCId()" Id="Url" Title="URL">
					<JsonPath Expr="share" Id="InpShare" DefaultValue=""/>
					<JsonPath Expr="ugcPost" Id="InpUGC" DefaultValue=""/>
				</Compute>
        <Compute Expr="@GetShareOrUGCId()" Id="Id" Title="Id">
					<JsonPath Expr="share" Id="InpShare" DefaultValue=""/>
					<JsonPath Expr="ugcPost" Id="InpUGC" DefaultValue=""/>
				</Compute>
				<JsonPath Expr="totalShareStatistics.shareCount" Id="Shares" Title="Shares" Converter="Int"/>
				<JsonPath Expr="totalShareStatistics.impressionCount" Id="Impressions" Title="Impressions" Converter="Int"/>
				<JsonPath Expr="totalShareStatistics.clickCount" Id="Clicks" Title="Clicks" Converter="Int"/>
				<JsonPath Expr="totalShareStatistics.likeCount" Id="Likes" Title="Likes" Converter="Int"/>
				<JsonPath Expr="totalShareStatistics.commentCount" Id="Comments" Title="Comments" Converter="Int"/>
				<JsonPath Expr="totalShareStatistics.engagement" Id="Engagement" Title="Engagement" Converter="Double"/>
			</JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="SocialActionsBreakdown" Title="Social Actions Breakdown" Group="Updates Statistics">
    <Parameters>
      <Text Id="Id" Title="Update Id" Required="true" Debug.DefaultValue="urn:li:ugcPost:6689203000226955264"/>
    </Parameters>
    <Fetch>
			<Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
        https://api.linkedin.com/v2/socialMetadata/@Model.Id
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.reactionSummaries.LIKE.count" Id="Likes" Converter="Int" DefaultValue="0"/>
      <JsonPath Expr="$.reactionSummaries.PRAISE.count" Id="Praise" Converter="Int" DefaultValue="0"/>
      <JsonPath Expr="$.reactionSummaries.MAYBE.count" Id="Maybe" Converter="Int" DefaultValue="0"/>
      <JsonPath Expr="$.reactionSummaries.EMPATHY.count" Id="Empathy" Converter="Int" DefaultValue="0"/>
      <JsonPath Expr="$.reactionSummaries.INTEREST.count" Id="Interest" Converter="Int" DefaultValue="0"/>
      <JsonPath Expr="$.commentSummary.count" Id="Comments" Converter="Int" DefaultValue="0"/>
      <JsonPath Expr="$.commentSummary.topLevelCount" Id="TopLevelComments" Title="Top Level Comments" Converter="Int" DefaultValue="0"/>

    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="LifetimeStats" Title="Lifetime Stats" Group="Updates Statistics">
    <Parameters>
      <Text Id="CompanyId" Title="Company Id" Required="true" Debug.DefaultValue="10887127" Select.Connector="CompanyPagesHidden"/>
    </Parameters>
    <Fetch>
			<Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
        https://api.linkedin.com/v2/organizationalEntityShareStatistics?q=organizationalEntity&organizationalEntity=urn:li:organization:@(Model.CompanyId)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.elements[0].totalShareStatistics">
				<JsonPath Expr="shareCount" Id="Shares" Title="Shares" Converter="Int"/>
				<JsonPath Expr="impressionCount" Id="Impressions" Title="Impressions" Converter="Int"/>
				<JsonPath Expr="uniqueImpressionsCount" Id="ImpressionsUnique" Title="Impressions Unique" Converter="Int"/>
				<JsonPath Expr="clickCount" Id="Clicks" Title="Clicks" Converter="Int"/>
				<JsonPath Expr="likeCount" Id="Likes" Title="Likes" Converter="Int"/>
				<JsonPath Expr="commentCount" Id="Comments" Title="Comments" Converter="Int"/>
				<JsonPath Expr="commentMentionsCount" Id="CommentMentions" Title="Comment Mentions" Converter="Int"/>
				<JsonPath Expr="shareMentionsCount" Id="shareMentions" Title="share Mentions" Converter="Int"/>
				<JsonPath Expr="engagement" Id="Engagement" Title="Engagement" Converter="Double"/>
			</JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="HistoryStats" Title="History Stats" Group="Updates Statistics">
    <Parameters>
      <Text Id="CompanyId" Title="Company Id" Required="true" Debug.DefaultValue="10887127" Select.Connector="CompanyPagesHidden"/>
      <Select Id="Granularity" Title="Granularity" DefaultValue="DAY" Required="true" HelpText="Granularity of the statistics">
        <DataSource>
          <Item Id="DAY" Title="Day"/>
          <Item Id="MONTH" Title="Month"/>
        </DataSource>
      </Select>
      <DateInterval Id="Period" Title="Period" Required="true"/>
    </Parameters>
    <Fetch>
			<Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
        https://api.linkedin.com/v2/organizationalEntityShareStatistics?q=organizationalEntity&organizationalEntity=urn:li:organization:@(Model.CompanyId)
				&timeIntervals.timeGranularityType=@(Model.Granularity)
				&timeIntervals.timeRange.start=@(((DateTimeOffset)Model.Period.StartDate.AddHours(1)).ToUnixTimeMilliseconds())
				&timeIntervals.timeRange.end=@(((DateTimeOffset)Model.Period.EndDate.AddDays(1).AddHours(1)).ToUnixTimeMilliseconds())
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.elements[*]">
        <JsonPath Expr="timeRange.start" Id="Period" Title="Period" Converter="DateTime" Converter.SourceFormat="UnixMs" DefaultValue=""/>
				<JsonPath Expr="totalShareStatistics.shareCount" Id="Shares" Title="Shares" Converter="Int" DefaultValue="0"/>
				<JsonPath Expr="totalShareStatistics.impressionCount" Id="Impressions" Title="Impressions" Converter="Int" DefaultValue="0"/>
				<JsonPath Expr="totalShareStatistics.uniqueImpressionsCount" Id="ImpressionsUnique" Title="Impressions Unique" Converter="Int" DefaultValue="0"/>
				<JsonPath Expr="totalShareStatistics.clickCount" Id="Clicks" Title="Clicks" Converter="Int" DefaultValue="0"/>
				<JsonPath Expr="totalShareStatistics.likeCount" Id="Likes" Title="Likes" Converter="Int" DefaultValue="0"/>
				<JsonPath Expr="totalShareStatistics.commentCount" Id="Comments" Title="Comments" Converter="Int" DefaultValue="0"/>
				<JsonPath Expr="totalShareStatistics.commentMentionsCount" Id="CommentMentions" Title="Comment Mentions" Converter="Int" DefaultValue="0"/>
				<JsonPath Expr="totalShareStatistics.shareMentionsCount" Id="shareMentions" Title="share Mentions" Converter="Int" DefaultValue="0"/>
				<JsonPath Expr="totalShareStatistics.engagement" Id="Engagement" Title="Engagement" Converter="Double" DefaultValue="0"/>
			</JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="PageviewsHistory" Title="Pageviews History" Group="Pageviews">
    <Parameters>
      <Text Id="CompanyId" Title="Company Id" Required="true" Debug.DefaultValue="34038" Select.Connector="CompanyPagesHidden"/>
      <Select Id="Type" Title="Metric Type" DefaultValue="views" Required="false">
        <DataSource>
          <Item Id="pageViews" Title="Views"/>
          <Item Id="uniquePageViews" Title="Unique Views"/>
        </DataSource>
      </Select>
      <Select Id="Granularity" Title="Granularity" DefaultValue="DAY" Required="true" HelpText="Granularity of the statistics">
        <DataSource>
          <Item Id="DAY" Title="Day"/>
          <Item Id="MONTH" Title="Month"/>
        </DataSource>
      </Select>
      <DateInterval Id="Period" Title="Period" Required="true"/>
    </Parameters>
    <Fetch>
			<Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
        https://api.linkedin.com/v2/organizationPageStatistics?q=organization&organization=urn:li:organization:@(Model.CompanyId)
				&timeIntervals.timeGranularityType=@(Model.Granularity)
				&timeIntervals.timeRange.start=@(((DateTimeOffset)Model.Period.StartDate.AddHours(1)).ToUnixTimeMilliseconds())
				&timeIntervals.timeRange.end=@(((DateTimeOffset)Model.Period.EndDate.AddDays(1).AddHours(1)).ToUnixTimeMilliseconds())
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.elements[*]">
        <JsonPath Expr="timeRange.start" Id="Period" Title="Period" Converter="DateTime" Converter.SourceFormat="UnixMs" DefaultValue=""/>
        <JsonPath Expr="totalPageStatistics.views.allPageViews.@(Model.Type)" Id="PageViews" Title="All Pageviews" Converter="Int"/>
        <JsonPath Expr="totalPageStatistics.views.allDesktopPageViews.@(Model.Type)" Id="DesktopPageViews" Title="Desktop Pageviews" Converter="Int"/>
        <JsonPath Expr="totalPageStatistics.views.allMobilePageViews.@(Model.Type)" Id="MobilePageViews" Title="Mobile Pageviews" Converter="Int"/>
        <JsonPath Expr="totalPageStatistics.views.overviewPageViews.@(Model.Type)" Id="OverviewPageViews" Title="Overview Pageviews" Converter="Int"/>
        <JsonPath Expr="totalPageStatistics.views.peoplePageViews.@(Model.Type)" Id="PeoplePageViews" Title="People Pageviews" Converter="Int"/>
        <JsonPath Expr="totalPageStatistics.views.careersPageViews.@(Model.Type)" Id="CareersPageViews" Title="Careers Pageviews" Converter="Int"/>
        <JsonPath Expr="totalPageStatistics.views.aboutPageViews.@(Model.Type)" Id="AboutPageViews" Title="About Pageviews" Converter="Int"/>
        <JsonPath Expr="totalPageStatistics.views.insightsPageViews.@(Model.Type)" Id="InsightsPageViews" Title="Insights Pageviews" Converter="Int"/>
        <JsonPath Expr="totalPageStatistics.views.jobsPageViews.@(Model.Type)" Id="JobsPageViews" Title="Jobs Pageviews" Converter="Int"/>
        <JsonPath Expr="totalPageStatistics.views.lifeAtPageViews.@(Model.Type)" Id="LifeAtPageViews" Title="Life At Pageviews" Converter="Int"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="PageviewsSeniority" Title="Pageviews by Seniority" Group="Pageviews">
    <Parameters>
      <Text Id="CompanyId" Title="Company Id" Required="true" Debug.DefaultValue="34038" Select.Connector="CompanyPagesHidden"/>
    </Parameters>
    <Fetch>
			<Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
        https://api.linkedin.com/v2/organizationPageStatistics?q=organization&organization=urn:li:organization:@(Model.CompanyId)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.elements[0].pageStatisticsBySeniority[*]">
        <Resource Id="DictSeniority"/>
        <Resource Id="Pageviews"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="PageviewsCompanySize" Title="Pageviews by Company Size" Group="Pageviews">
    <Parameters>
      <Text Id="CompanyId" Title="Company Id" Required="true" Debug.DefaultValue="34038" Select.Connector="CompanyPagesHidden"/>
    </Parameters>
    <Fetch>
			<Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
        https://api.linkedin.com/v2/organizationPageStatistics?q=organization&organization=urn:li:organization:@(Model.CompanyId)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.elements[0].pageStatisticsByStaffCountRange[*]">
      <Resource Id="Pageviews"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="PageviewsFunction" Title="Pageviews by Job Function" Group="Pageviews">
    <Parameters>
      <Text Id="CompanyId" Title="Company Id" Required="true" Debug.DefaultValue="34038" Select.Connector="CompanyPagesHidden"/>
    </Parameters>
    <Fetch>
			<Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
        https://api.linkedin.com/v2/organizationPageStatistics?q=organization&organization=urn:li:organization:@(Model.CompanyId)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.elements[0].pageStatisticsByFunction[*]">
        <Resource Id="DictFunctions"/>
				<Resource Id="Pageviews"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="PageviewsIndustry" Title="Pageviews by Industry" Group="Pageviews">
    <Parameters>
      <Text Id="CompanyId" Title="Company Id" Required="true" Debug.DefaultValue="34038" Select.Connector="CompanyPagesHidden"/>
    </Parameters>
    <Fetch>
			<Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
        https://api.linkedin.com/v2/organizationPageStatistics?q=organization&organization=urn:li:organization:@(Model.CompanyId)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.elements[0].pageStatisticsByIndustry[*]">
        <Resource Id="DictIndustries"/>
        <Resource Id="Pageviews"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="PageviewsCountry" Title="Pageviews by Country" Group="Pageviews">
    <Parameters>
      <Text Id="CompanyId" Title="Company Id" Required="true" Debug.DefaultValue="34038" Select.Connector="CompanyPagesHidden"/>
    </Parameters>
    <Fetch>
			<Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
        https://api.linkedin.com/v2/organizationPageStatistics?q=organization&organization=urn:li:organization:@(Model.CompanyId)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.elements[0].pageStatisticsByCountry[*]">
        <Compute Id="Country" Title="Country">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\w{2}$");
              Match match = regex.Match(Model.Inp);
            }
            @Utils.IsoCountryCodeToName(match.Groups[0].Value)
            ]]>
          </Compute.Expr>
					<JsonPath Expr="country" Id="Inp"/>
				</Compute>
				<Resource Id="Pageviews"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="CompanyLookup" Title="Company Lookup" Group="Companies">
    <Parameters>
      <Select Id="Type" Title="Lookup Method" DefaultValue="vanityName" Required="false">
        <DataSource>
          <Item Id="vanityName" Title="Vanity Name or LinkedIn URL"/>
          <Item Id="emailDomain" Title="Email Domain"/>
        </DataSource>
      </Select>
      <Text Id="Query" Title="Query" Required="true" Debug.DefaultValue="dagens-nyheter"/>
    </Parameters>
    <Fetch>
			<Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
        https://api.linkedin.com/v2/organizations?q=@(Model.Type)&@(Model.Type)=
				@(Model.Type == "emailDomain"
					? Model.Query
					:	Model.Query.Contains("/company/")
						? GetVanityName()
						: Model.Query)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.elements[0]">
        <JsonPath Expr="id" Id="Id" Title="Id" Converter="Auto"/>
        <JsonPath Expr="vanityName" Id="VanityName" Title="Vanity Name" Converter="String"/>
        <JsonPath Expr="localizedName" Id="LocalizedName" Title="Localized Name" Converter="String"/>
        <JsonPath Expr="locations[0].staffCountRange" Id="CompanySize" Title="Company Size" Converter="String" DefaultValue=""/>
        <JsonPath Expr="locations[0].locationType" Id="LocationType" Title="Location Type" Converter="String" DefaultValue=""/>
        <JsonPath Expr="locations[0].localizedDescription" Id="LocationDescription" Title="Location Description" Converter="String" DefaultValue=""/>
        <JsonPath Expr="locations[0].address.line1" Id="Address" Title="Address" Converter="String" DefaultValue=""/>
        <JsonPath Expr="locations[0].address.city" Id="City" Title="City" Converter="String" DefaultValue=""/>
        <JsonPath Expr="locations[0].address.geographicArea" Id="Area" Title="Area" Converter="String" DefaultValue=""/>
        <JsonPath Expr="locations[0].address.postalCode" Id="PostalCode" Title="Postal Code" Converter="Auto" DefaultValue=""/>
				<Compute Expr="@Utils.IsoCountryCodeToName(Model.Inp)" Id="Country" Converter="Auto" DefaultValue="">
					<JsonPath Expr="locations[0].address.country" Id="Inp" DefaultValue=""/>
				</Compute>
        <JsonPath Expr="locations[0].phoneNumber1.number" Id="Phone" Title="Phone" DefaultValue=""/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="CompanyFollowersCount" Title="Company Followers Count" Group="Companies">
    <Parameters>
      <Text Id="CompanyId" Title="CompanyId" Required="true" Debug.DefaultValue="163326"/>
    </Parameters>
    <Fetch>
			<Resource Id="HttpSettings"/>
      <Fetch.Url>
        <![CDATA[
        https://api.linkedin.com/v2/networkSizes/urn:li:organization:@(Model.CompanyId)?edgeType=CompanyFollowedByMember
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="firstDegreeSize" Id="Followers" Title="Followers" Converter="Auto"/>´
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RazorFunctions>
    <![CDATA[
    string FetchBatchString() {
      string[] linesUGC = ((string)Model.Ids).Trim().Split('\n').Select(e => e.Trim())
				.Where(e => !string.IsNullOrEmpty(e) && e.Contains("urn:li:ugcPost:"))
				.ToArray();
			
      string[] linesShare = ((string)Model.Ids).Trim().Split('\n').Select(e => e.Trim())
				.Where(e => !string.IsNullOrEmpty(e) && e.Contains("urn:li:share:"))
				.Take(100).ToArray();

			string strUGC = string.Join("&",linesUGC.Select((e, i) => "ugcPosts[" + i + "]=" + e).ToArray());
			string strShare = string.Join("&",linesShare.Select((e, i) => "shares[" + i + "]=" + e).ToArray());

			var arr = new[] { strUGC, strShare };
			return string.Join("&", arr.Where(s => !string.IsNullOrEmpty(s)));
    }

		string GetShareOrUGCId() {
			return !string.IsNullOrEmpty(Model.InpShare) ? Model.InpShare : Model.InpUGC;
		}

		String GetVanityName() {
			Regex regex = new Regex(@"company\/(.*?)\/?$");
			Match match = regex.Match(Model.Query);
			return match.Groups[1].Value;
    }
    ]]>
  </RazorFunctions>

</Suite>