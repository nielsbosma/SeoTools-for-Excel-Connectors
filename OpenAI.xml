<?xml version="1.0" encoding="utf-8" ?>
<Suite Title="OpenAI" Id="OpenAI" Category="AI" RequireVersion="9.7.1" SourceUrl="https://github.com/nielsbosma/SeoTools-for-Excel-Connectors/blob/master/OpenAI.xml" HelpUrl="http://seotoolsforexcel.com/openai/" HelpText="Documentation">

  <Author Name="Niels Bosma" Url="https://se.linkedin.com/in/bosmaniels"/>

  <Settings HelpText="What's this?" HelpUrl="http://seotoolsforexcel.com/openai/">
    <Text Id="ApiKey" Title="API Key" Required="true"/>
  </Settings>

  <Resources>
    <Resource Id="HttpProps">
      <Cache>true</Cache>
      <CacheKeyComponents>Url;RequestBody</CacheKeyComponents>
      <RequestContentType>application/json</RequestContentType>
      <RequestHeaders>
        <Header Name='Authorization'>Bearer @(Model.ApiKey)</Header>
      </RequestHeaders>
    </Resource>
    <Resource Id="Fail">
      <Fail>
        <JsonPath Expr="$.error.message"/>
      </Fail>
    </Resource>
  </Resources>

	<RestConnector Id="Models" Hidden="true">
    <Fetch>
      <Fetch.Url>
        <![CDATA[
        https://api.openai.com/v1/models
        ]]>
      </Fetch.Url>
      <HttpSettings>
      <RequestHeaders>
        <Header Name='Authorization'>Bearer @(Model.ApiKey)</Header>
      </RequestHeaders>
      </HttpSettings>
    </Fetch>
    <Parse>
			<JsonPath Expr="$.data[*]">
				<JsonPath Expr="id" Id="ModelId" Title="Model Id"/>
				<JsonPath Expr="created" Id="Created" Title="Created" Converter="DateTime" Converter.SourceFormat="Unix"/>
			</JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="OpenAI" Title="OpenAI" HelpUrl="https://platform.openai.com/docs/api-reference/chat/create">
    <Parameters>
      <Text Id="Message" Debug.DefaultValue="mimetype of filetype bmp" Required="true" Multiline="true"/>
      <Text Id="PrependMessage" Title="Prepend Message" Multiline="true" HelpText="Added before the prompt. Useful with formulas."/>
      <Text Id="AppendMessage" Title="Append Message" Multiline="true" HelpText="Added after the prompt. Useful with formulas."/>
			<Text Id="Model" Title="Model" Select.Connector="Models" Debug.DefaultValue="gpt-5-mini" Required="true"/>
      <Text Id="StopSequence" Title="Stop Sequence" HelpText="Sequence where the API will stop generating further tokens. The returned text will not contain the stop sequence."/>
      <Number Id="TopP" Title="Top P" Minimum="0" DefaultValue="1" Maximum="1" Format="N1" HelpText="Controls diversity via nucleus sampling: 0.5 means half of all likelihood-weighted options are considered."/>
      <Number Id="Frequency" Minimum="0" DefaultValue="0" Maximum="2" Format="N1" HelpText="How much to penalize new tokens based on their existing frequency in the text so far. Decreases the model's likelihood to repeat the same line verbatim."/>
      <Number Id="PresencePenalty" Title="Presence Penalty" Minimum="0" DefaultValue="0" Maximum="2" Format="N1" HelpText="How much to penalize new tokens based on whether they appear in the text so far. Increases the model's likelihood to talk about new topics."/>
      <Number Id="Delay" Title="Delay Between Requests (ms)" DefaultValue="1000" Minimum="0" Maximum="1000000" Format="N0" HelpText="The delay between requests in milliseconds. This is useful when you want to avoid hitting the API rate limit." HelpUrl="https://help.openai.com/en/articles/5955598-is-api-usage-subject-to-any-rate-limits"/>
    </Parameters>
    <Fetch>
      <HttpSettings>
        <Resource Id="HttpProps"/>
        <RequestMethod>POST</RequestMethod>
				<IntervalBetweenRequests RandomFrom="@(Model.Delay)" RandomTo="@(Model.Delay)" IfSame="Host"/>
        <RequestBody>
        <![CDATA[
				@{
					var dict = new Dictionary<string, object>();
					dict.Add("model", Model.Model);
					dict.Add("top_p", Model.TopP);
					dict.Add("frequency_penalty", Model.Frequency);
					dict.Add("presence_penalty", Model.PresencePenalty);

					var messages = new[]
					{
						new { role = "user", content = (Model.PrependMessage + Model.Message + Model.AppendMessage).Trim() }
					};
					dict.Add("messages", messages);

					if(!string.IsNullOrEmpty(Model.StopSequence))
					{
						dict.Add("stop", new[] { Model.StopSequence });
					}
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
      <Fetch.Url>
      <![CDATA[
        https://api.openai.com/v1/chat/completions
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.choices[0].message.content" Id="Content"/>
    </Parse>
    <Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="Models" Title="Models" HelpUrl="https://platform.openai.com/docs/api-reference/models/list" Hidden="true">
    <Fetch>
      <HttpSettings>
        <Resource Id="HttpProps"/>
      </HttpSettings>
      <Fetch.Url>
      <![CDATA[
        https://api.openai.com/v1/models
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.choices[0].message.content" Id="Text"/>
    </Parse>
    <Resource Id="Fail"/>
  </RestConnector>

</Suite>
