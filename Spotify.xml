<?xml version="1.0" encoding="utf-8" ?>
<Suite Category="Entertainment" Title="Spotify" Id="Spotify" RequireVersion="6.1.10" SourceUrl="https://github.com/nielsbosma/SeoTools-for-Excel-Connectors/blob/master/Spotify.xml" HelpUrl="http://seotoolsforexcel.com/Spotify/" HelpText="Documentation">

  <Author Name="Victor Sandberg" Url="http://community.seotoolsforexcel.com/users/diskborste/activity"/>

  <DefaultOAuthAuthenticator StayAuthenticated="false" TokenName="access_token" AuthUrl="https://accounts.spotify.com/authorize?client_id=3d6357b55f7a4d3880320880bee775b2&amp;response_type=token&amp;redirect_uri={0}&amp;scope=playlist-modify-public"/>

  <Resources>
    <Resource Id="CountryCodes">
      <Item Id="all" Title="All Markets"/>
      <Item Id="AF" Title="Afghanistan"/>
      <Item Id="AX" Title="Aland Islands"/>
      <Item Id="AL" Title="Albania"/>
      <Item Id="DZ" Title="Algeria"/>
      <Item Id="AS" Title="American Samoa"/>
      <Item Id="AD" Title="Andorra"/>
      <Item Id="AO" Title="Angola"/>
      <Item Id="AI" Title="Anguilla"/>
      <Item Id="AQ" Title="Antarctica"/>
      <Item Id="AG" Title="Antigua and Barbuda"/>
      <Item Id="AR" Title="Argentina"/>
      <Item Id="AM" Title="Armenia"/>
      <Item Id="AW" Title="Aruba"/>
      <Item Id="AU" Title="Australia"/>
      <Item Id="AT" Title="Austria"/>
      <Item Id="AZ" Title="Azerbaijan"/>
      <Item Id="BS" Title="Bahamas"/>
      <Item Id="BH" Title="Bahrain"/>
      <Item Id="BD" Title="Bangladesh"/>
      <Item Id="BB" Title="Barbados"/>
      <Item Id="BY" Title="Belarus"/>
      <Item Id="BE" Title="Belgium"/>
      <Item Id="BZ" Title="Belize"/>
      <Item Id="BJ" Title="Benin"/>
      <Item Id="BM" Title="Bermuda"/>
      <Item Id="BT" Title="Bhutan"/>
      <Item Id="BO" Title="Bolivia"/>
      <Item Id="BQ" Title="Bonaire, Saint Eustatius and Saba"/>
      <Item Id="BA" Title="Bosnia and Herzegovina"/>
      <Item Id="BW" Title="Botswana"/>
      <Item Id="BV" Title="Bouvet Island"/>
      <Item Id="BR" Title="Brazil"/>
      <Item Id="IO" Title="British Indian Ocean Territory"/>
      <Item Id="VG" Title="British Virgin Islands"/>
      <Item Id="BN" Title="Brunei"/>
      <Item Id="BG" Title="Bulgaria"/>
      <Item Id="BF" Title="Burkina Faso"/>
      <Item Id="BI" Title="Burundi"/>
      <Item Id="KH" Title="Cambodia"/>
      <Item Id="CM" Title="Cameroon"/>
      <Item Id="CA" Title="Canada"/>
      <Item Id="CV" Title="Cape Verde"/>
      <Item Id="KY" Title="Cayman Islands"/>
      <Item Id="CF" Title="Central African Republic"/>
      <Item Id="TD" Title="Chad"/>
      <Item Id="CL" Title="Chile"/>
      <Item Id="CN" Title="China"/>
      <Item Id="CX" Title="Christmas Island"/>
      <Item Id="CC" Title="Cocos Islands"/>
      <Item Id="CO" Title="Colombia"/>
      <Item Id="KM" Title="Comoros"/>
      <Item Id="CK" Title="Cook Islands"/>
      <Item Id="CR" Title="Costa Rica"/>
      <Item Id="HR" Title="Croatia"/>
      <Item Id="CU" Title="Cuba"/>
      <Item Id="CW" Title="Curaçao"/>
      <Item Id="CY" Title="Cyprus"/>
      <Item Id="CZ" Title="Czech Republic"/>
      <Item Id="CD" Title="Democratic Republic of the Congo"/>
      <Item Id="DK" Title="Denmark"/>
      <Item Id="DJ" Title="Djibouti"/>
      <Item Id="DM" Title="Dominica"/>
      <Item Id="DO" Title="Dominican Republic"/>
      <Item Id="TL" Title="East Timor"/>
      <Item Id="EC" Title="Ecuador"/>
      <Item Id="EG" Title="Egypt"/>
      <Item Id="SV" Title="El Salvador"/>
      <Item Id="GQ" Title="Equatorial Guinea"/>
      <Item Id="ER" Title="Eritrea"/>
      <Item Id="EE" Title="Estonia"/>
      <Item Id="ET" Title="Ethiopia"/>
      <Item Id="FK" Title="Falkland Islands"/>
      <Item Id="FO" Title="Faroe Islands"/>
      <Item Id="FJ" Title="Fiji"/>
      <Item Id="FI" Title="Finland"/>
      <Item Id="FR" Title="France"/>
      <Item Id="GF" Title="French Guiana"/>
      <Item Id="PF" Title="French Polynesia"/>
      <Item Id="TF" Title="French Southern Territories"/>
      <Item Id="GA" Title="Gabon"/>
      <Item Id="GM" Title="Gambia"/>
      <Item Id="GE" Title="Georgia"/>
      <Item Id="DE" Title="Germany"/>
      <Item Id="GH" Title="Ghana"/>
      <Item Id="GI" Title="Gibraltar"/>
      <Item Id="GR" Title="Greece"/>
      <Item Id="GL" Title="Greenland"/>
      <Item Id="GD" Title="Grenada"/>
      <Item Id="GP" Title="Guadeloupe"/>
      <Item Id="GU" Title="Guam"/>
      <Item Id="GT" Title="Guatemala"/>
      <Item Id="GG" Title="Guernsey"/>
      <Item Id="GN" Title="Guinea"/>
      <Item Id="GW" Title="Guinea-Bissau"/>
      <Item Id="GY" Title="Guyana"/>
      <Item Id="HT" Title="Haiti"/>
      <Item Id="HM" Title="Heard Island and McDonald Islands"/>
      <Item Id="HN" Title="Honduras"/>
      <Item Id="HK" Title="Hong Kong"/>
      <Item Id="HU" Title="Hungary"/>
      <Item Id="IS" Title="Iceland"/>
      <Item Id="IN" Title="India"/>
      <Item Id="ID" Title="Indonesia"/>
      <Item Id="IR" Title="Iran"/>
      <Item Id="IQ" Title="Iraq"/>
      <Item Id="IE" Title="Ireland"/>
      <Item Id="IM" Title="Isle of Man"/>
      <Item Id="IL" Title="Israel"/>
      <Item Id="IT" Title="Italy"/>
      <Item Id="CI" Title="Ivory Coast"/>
      <Item Id="JM" Title="Jamaica"/>
      <Item Id="JP" Title="Japan"/>
      <Item Id="JE" Title="Jersey"/>
      <Item Id="JO" Title="Jordan"/>
      <Item Id="KZ" Title="Kazakhstan"/>
      <Item Id="KE" Title="Kenya"/>
      <Item Id="KI" Title="Kiribati"/>
      <Item Id="XK" Title="Kosovo"/>
      <Item Id="KW" Title="Kuwait"/>
      <Item Id="KG" Title="Kyrgyzstan"/>
      <Item Id="LA" Title="Laos"/>
      <Item Id="LV" Title="Latvia"/>
      <Item Id="LB" Title="Lebanon"/>
      <Item Id="LS" Title="Lesotho"/>
      <Item Id="LR" Title="Liberia"/>
      <Item Id="LY" Title="Libya"/>
      <Item Id="LI" Title="Liechtenstein"/>
      <Item Id="LT" Title="Lithuania"/>
      <Item Id="LU" Title="Luxembourg"/>
      <Item Id="MO" Title="Macao"/>
      <Item Id="MK" Title="Macedonia"/>
      <Item Id="MG" Title="Madagascar"/>
      <Item Id="MW" Title="Malawi"/>
      <Item Id="MY" Title="Malaysia"/>
      <Item Id="MV" Title="Maldives"/>
      <Item Id="ML" Title="Mali"/>
      <Item Id="MT" Title="Malta"/>
      <Item Id="MH" Title="Marshall Islands"/>
      <Item Id="MQ" Title="Martinique"/>
      <Item Id="MR" Title="Mauritania"/>
      <Item Id="MU" Title="Mauritius"/>
      <Item Id="YT" Title="Mayotte"/>
      <Item Id="MX" Title="Mexico"/>
      <Item Id="FM" Title="Micronesia"/>
      <Item Id="MD" Title="Moldova"/>
      <Item Id="MC" Title="Monaco"/>
      <Item Id="MN" Title="Mongolia"/>
      <Item Id="ME" Title="Montenegro"/>
      <Item Id="MS" Title="Montserrat"/>
      <Item Id="MA" Title="Morocco"/>
      <Item Id="MZ" Title="Mozambique"/>
      <Item Id="MM" Title="Myanmar"/>
      <Item Id="NA" Title="Namibia"/>
      <Item Id="NR" Title="Nauru"/>
      <Item Id="NP" Title="Nepal"/>
      <Item Id="NL" Title="Netherlands"/>
      <Item Id="AN" Title="Netherlands Antilles"/>
      <Item Id="NC" Title="New Caledonia"/>
      <Item Id="NZ" Title="New Zealand"/>
      <Item Id="NI" Title="Nicaragua"/>
      <Item Id="NE" Title="Niger"/>
      <Item Id="NG" Title="Nigeria"/>
      <Item Id="NU" Title="Niue"/>
      <Item Id="NF" Title="Norfolk Island"/>
      <Item Id="KP" Title="North Korea"/>
      <Item Id="MP" Title="Northern Mariana Islands"/>
      <Item Id="NO" Title="Norway"/>
      <Item Id="OM" Title="Oman"/>
      <Item Id="PK" Title="Pakistan"/>
      <Item Id="PW" Title="Palau"/>
      <Item Id="PS" Title="Palestinian Territory"/>
      <Item Id="PA" Title="Panama"/>
      <Item Id="PG" Title="Papua New Guinea"/>
      <Item Id="PY" Title="Paraguay"/>
      <Item Id="PE" Title="Peru"/>
      <Item Id="PH" Title="Philippines"/>
      <Item Id="PN" Title="Pitcairn"/>
      <Item Id="PL" Title="Poland"/>
      <Item Id="PT" Title="Portugal"/>
      <Item Id="PR" Title="Puerto Rico"/>
      <Item Id="QA" Title="Qatar"/>
      <Item Id="CG" Title="Republic of the Congo"/>
      <Item Id="RE" Title="Reunion"/>
      <Item Id="RO" Title="Romania"/>
      <Item Id="RU" Title="Russia"/>
      <Item Id="RW" Title="Rwanda"/>
      <Item Id="BL" Title="Saint Barthélemy"/>
      <Item Id="SH" Title="Saint Helena"/>
      <Item Id="KN" Title="Saint Kitts and Nevis"/>
      <Item Id="LC" Title="Saint Lucia"/>
      <Item Id="MF" Title="Saint Martin"/>
      <Item Id="PM" Title="Saint Pierre and Miquelon"/>
      <Item Id="VC" Title="Saint Vincent and the Grenadines"/>
      <Item Id="WS" Title="Samoa"/>
      <Item Id="SM" Title="San Marino"/>
      <Item Id="ST" Title="Sao Tome and Principe"/>
      <Item Id="SA" Title="Saudi Arabia"/>
      <Item Id="SN" Title="Senegal"/>
      <Item Id="RS" Title="Serbia"/>
      <Item Id="CS" Title="Serbia and Montenegro"/>
      <Item Id="SC" Title="Seychelles"/>
      <Item Id="SL" Title="Sierra Leone"/>
      <Item Id="SG" Title="Singapore"/>
      <Item Id="SX" Title="Sint Maarten"/>
      <Item Id="SK" Title="Slovakia"/>
      <Item Id="SI" Title="Slovenia"/>
      <Item Id="SB" Title="Solomon Islands"/>
      <Item Id="SO" Title="Somalia"/>
      <Item Id="ZA" Title="South Africa"/>
      <Item Id="GS" Title="South Georgia and the South Sandwich Islands"/>
      <Item Id="KR" Title="South Korea"/>
      <Item Id="SS" Title="South Sudan"/>
      <Item Id="ES" Title="Spain"/>
      <Item Id="LK" Title="Sri Lanka"/>
      <Item Id="SD" Title="Sudan"/>
      <Item Id="SR" Title="Suriname"/>
      <Item Id="SJ" Title="Svalbard and Jan Mayen"/>
      <Item Id="SZ" Title="Swaziland"/>
      <Item Id="SE" Title="Sweden"/>
      <Item Id="CH" Title="Switzerland"/>
      <Item Id="SY" Title="Syria"/>
      <Item Id="TW" Title="Taiwan"/>
      <Item Id="TJ" Title="Tajikistan"/>
      <Item Id="TZ" Title="Tanzania"/>
      <Item Id="TH" Title="Thailand"/>
      <Item Id="TG" Title="Togo"/>
      <Item Id="TK" Title="Tokelau"/>
      <Item Id="TO" Title="Tonga"/>
      <Item Id="TT" Title="Trinidad and Tobago"/>
      <Item Id="TN" Title="Tunisia"/>
      <Item Id="TR" Title="Turkey"/>
      <Item Id="TM" Title="Turkmenistan"/>
      <Item Id="TC" Title="Turks and Caicos Islands"/>
      <Item Id="TV" Title="Tuvalu"/>
      <Item Id="VI" Title="U.S. Virgin Islands"/>
      <Item Id="UG" Title="Uganda"/>
      <Item Id="UA" Title="Ukraine"/>
      <Item Id="AE" Title="United Arab Emirates"/>
      <Item Id="GB" Title="United Kingdom"/>
      <Item Id="US" Title="United States"/>
      <Item Id="UM" Title="United States Minor Outlying Islands"/>
      <Item Id="UY" Title="Uruguay"/>
      <Item Id="UZ" Title="Uzbekistan"/>
      <Item Id="VU" Title="Vanuatu"/>
      <Item Id="VA" Title="Vatican"/>
      <Item Id="VE" Title="Venezuela"/>
      <Item Id="VN" Title="Vietnam"/>
      <Item Id="WF" Title="Wallis and Futuna"/>
      <Item Id="EH" Title="Western Sahara"/>
      <Item Id="YE" Title="Yemen"/>
      <Item Id="ZM" Title="Zambia"/>
      <Item Id="ZW" Title="Zimbabwe"/>
    </Resource>
  </Resources>

  <RestConnector Id="ArtistSearch" Title="Artist Search" HelpUrl="https://developer.spotify.com/web-api/search-item/">
    <Parameters>
      <Text Id="Query" Title="Search" Debug.DefaultValue="flowers" Required="true"/>
      <Text Id="YearStart" Title="Earliest Year" DefaultValue="" Required="false" HelpText=""/>
      <Text Id="YearEnd" Title="Latest Year" DefaultValue="" Required="false" HelpText=""/>
      <Text Id="Genre" Title="Filter by Genre" DefaultValue="" Required="false" HelpText=""/>
      <Select Id="CountryCode" Title="Filter by Market" Required="false" DefaultValue="all" HelpText="">
        <DataSource>
          <Resource Id="CountryCodes"/>
        </DataSource>
      </Select>
    </Parameters>
    <Paging PageSize="50" EvenPages="false" MaxTake="100000">
      <Parse>
        <JsonPath Id="AvaliableRows" Expr="artists.total"/>
      </Parse>
    </Paging>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name='Authorization'>Bearer  @(Model.Authenticator.Token)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.spotify.com/v1/search?
        q=@Utils.UrlEncode(Model.Query)
        @if(!string.IsNullOrEmpty(Model.YearStart) && !string.IsNullOrEmpty(Model.YearEnd) && Model.YearStart == Model.YearEnd)
        {
          @: %20year:@(Model.YearStart)
        }
        else if(!string.IsNullOrEmpty(Model.YearStart) && !string.IsNullOrEmpty(Model.YearEnd) && Model.YearStart != Model.YearEnd)
        {
          @: %20year:@(Model.YearStart)-@(Model.YearEnd)
        }
        else if(!string.IsNullOrEmpty(Model.YearStart) && string.IsNullOrEmpty(Model.YearEnd))
        {
          @: %20year:@(Model.YearStart)-3000
        }
        else if(string.IsNullOrEmpty(Model.YearStart) && !string.IsNullOrEmpty(Model.YearEnd))
        {
          @: %20year:0-@(Model.YearEnd)
        }
        @if(!string.IsNullOrEmpty(Model.Genre) && Model.Genre.Contains(" "))
        {
          @: &genre="@Utils.UrlEncode(Model.Genre)"
        }
        else if(!string.IsNullOrEmpty(Model.Genre) && !Model.Genre.Contains(" "))
        {
          @: &genre=@Utils.UrlEncode(Model.Genre)
        }
        &type=artist
        @if(Model.CountryCode != "all")
        {
          @: &market=@(Model.CountryCode)
        }
        &limit=@(Model.PageCursor.NextTake)
        &offset=@(Model.PageCursor.NextSkip)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="artists.items.*">
        <JsonPath Expr="id" Id="Id" Title="Id" Converter="String" HelpText=""/>
        <JsonPath Expr="name" Id="Name" Title="Name" Converter="String" HelpText=""/>
        <JsonPath Expr="popularity" Id="Popularity" Title="Popularity" Converter="Int" HelpText=""/>
        <JsonPath Expr="followers.total" Id="Followers" Title="Followers" Converter="Int" HelpText=""/>
        <Compute Id="Genres" Title="Genres">
          <Compute.Expr>
            <![CDATA[
            @{
            string genresstripped = "";
            if(Model.GenresInput is string)
            {
              var temp = Regex.Replace(Model.GenresInput, @"\s+", " ");
              var temp2 = Regex.Replace(temp, @"\""", string.Empty);
              genresstripped = temp2.Substring(1,temp2.Length-2);
            }
            @genresstripped
            ]]>
          </Compute.Expr>
          <JsonPath Expr="genres" Id="GenresInput" Converter="String" HelpText=""/>
        </Compute>
        <JsonPath Expr="external_urls.spotify" Id="ArtistLink" Title="Artist Link" Converter="String" HelpText=""/>
        <JsonPath Expr="images[0].url" Id="Image" Title="Image" Converter="String" HelpText="" DefaultValue=""/>
      </JsonPath>
    </Parse>
    <Fail>
      <JsonPath Expr="errors.message"/>
    </Fail>
  </RestConnector>

  <RestConnector Id="AlbumSearch" Title="Album Search" HelpUrl="https://developer.spotify.com/web-api/search-item/">
    <Parameters>
      <Text Id="Query" Title="Query" Debug.DefaultValue="flowers" Required="true"/>
      <Text Id="ArtistFilter" Title="Filter by Artist Name" Debug.DefaultValue="" Required="false"/>
      <Text Id="YearStart" Title="Earliest Year" DefaultValue="" Required="false" HelpText=""/>
      <Text Id="YearEnd" Title="Latest Year" DefaultValue="" Required="false" HelpText=""/>
      <Checkbox Id="NewOnly" Title="Released Within Last Two Weeks" DefaultValue="false"/>
      <Checkbox Id="Hipster" Title="Lowest 10% Popularity" DefaultValue="false"/>
      <Text Id="Genre" Title="Filter by Genre" DefaultValue="" Required="false" HelpText=""/>
      <Select Id="CountryCode" Title="Filter by Market" Required="false" DefaultValue="all" HelpText="">
        <DataSource>
          <Resource Id="CountryCodes"/>
        </DataSource>
      </Select>
    </Parameters>
    <Paging PageSize="50" EvenPages="false" MaxTake="100000">
      <Parse>
        <JsonPath Id="AvaliableRows" Expr="albums.total"/>
      </Parse>
    </Paging>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name='Authorization'>Bearer  @(Model.Authenticator.Token)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.spotify.com/v1/search?
        q=@Utils.UrlEncode(Model.Query)
        @if(!string.IsNullOrEmpty(Model.ArtistFilter))
        {
          @: %20artist:@Utils.UrlEncode(Model.ArtistFilter)
        }
        @if(Model.NewOnly == true)
        {
          @: %20tag:new
        }
        @if(!string.IsNullOrEmpty(Model.YearStart) && !string.IsNullOrEmpty(Model.YearEnd) && Model.YearStart == Model.YearEnd)
        {
          @: %20year:@(Model.YearStart)
        }
        else if(!string.IsNullOrEmpty(Model.YearStart) && !string.IsNullOrEmpty(Model.YearEnd) && Model.YearStart != Model.YearEnd)
        {
          @: %20year:@(Model.YearStart)-@(Model.YearEnd)
        }
        else if(!string.IsNullOrEmpty(Model.YearStart) && string.IsNullOrEmpty(Model.YearEnd))
        {
          @: %20year:@(Model.YearStart)-3000
        }
        else if(string.IsNullOrEmpty(Model.YearStart) && !string.IsNullOrEmpty(Model.YearEnd))
        {
          @: %20year:0-@(Model.YearEnd)
        }
        @if(!string.IsNullOrEmpty(Model.Genre) && Model.Genre.Contains(" "))
        {
          @: &genre="@Utils.UrlEncode(Model.Genre)"
        }
        else if(!string.IsNullOrEmpty(Model.Genre) && !Model.Genre.Contains(" "))
        {
          @: &genre=@Utils.UrlEncode(Model.Genre)
        }
        @if(Model.Hipster == true)
        {
          @: %20tag:hipster
        }
        &type=album
        @if(Model.CountryCode != "all")
        {
          @: &market=@(Model.CountryCode)
        }
        &limit=@(Model.PageCursor.NextTake)
        &offset=@(Model.PageCursor.NextSkip)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="albums.items.*">
        <JsonPath Expr="id" Id="Id" Title="Id" Converter="String" HelpText=""/>
        <JsonPath Expr="name" Id="Name" Title="Name" Converter="String" HelpText=""/>
        <Compute Id="Markets" Title="Markets">
          <Compute.Expr>
            <![CDATA[
            @{
            string marketsstripped = "";
            if(Model.MarketsInput is string)
            {
              var temp = Regex.Replace(Model.MarketsInput, @"\s+", " ");
              var temp2 = Regex.Replace(temp, @"\""", string.Empty);
              marketsstripped = temp2.Substring(1,temp2.Length-2);
            }
            @marketsstripped
            ]]>
          </Compute.Expr>
          <JsonPath Expr="available_markets" Id="MarketsInput" Converter="String" HelpText=""/>
        </Compute>
        <JsonPath Expr="artists[0].id" Id="ArtistId" Title="Artist Id" Converter="String" HelpText=""/>
        <JsonPath Expr="artists[0].name" Id="Artist" Title="Artist Name" Converter="String" HelpText=""/>
        <JsonPath Expr="external_urls.spotify" Id="AlbumLink" Title="Album Link" Converter="String" HelpText=""/>
        <JsonPath Expr="images[0].url" Id="Image" Title="Image" Converter="String" HelpText="" DefaultValue=""/>
      </JsonPath>
    </Parse>
    <Fail>
      <JsonPath Expr="errors.message"/>
    </Fail>
  </RestConnector>

  <RestConnector Id="TrackSearch" Title="Track Search" HelpUrl="https://developer.spotify.com/web-api/search-item/">
    <Parameters>
      <Text Id="Query" Title="Query" Debug.DefaultValue="flowers" Required="true"/>
      <Text Id="ArtistFilter" Title="Filter by Artist Name" Debug.DefaultValue="" Required="false"/>
      <Text Id="AlbumFilter" Title="Filter by Album Name" Debug.DefaultValue="" Required="false"/>
      <Text Id="YearStart" Title="Earliest Year" DefaultValue="" Required="false" HelpText=""/>
      <Text Id="YearEnd" Title="Latest Year" DefaultValue="" Required="false" HelpText=""/>
      <Text Id="Genre" Title="Filter by Genre" DefaultValue="" Required="false" HelpText=""/>
      <Select Id="CountryCode" Title="Filter by Market" Required="false" DefaultValue="all" HelpText="">
        <DataSource>
          <Resource Id="CountryCodes"/>
        </DataSource>
      </Select>
    </Parameters>
    <Paging PageSize="50" EvenPages="false" MaxTake="100000">
      <Parse>
        <JsonPath Id="AvaliableRows" Expr="tracks.total"/>
      </Parse>
    </Paging>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name='Authorization'>Bearer  @(Model.Authenticator.Token)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.spotify.com/v1/search?
        q=@Utils.UrlEncode(Model.Query)
        @if(!string.IsNullOrEmpty(Model.ArtistFilter))
        {
          @: %20artist:@Utils.UrlEncode(Model.ArtistFilter)
        }
        @if(!string.IsNullOrEmpty(Model.AlbumFilter))
        {
          @: %20album:@Utils.UrlEncode(Model.AlbumFilter)
        }
        @if(!string.IsNullOrEmpty(Model.YearStart) && !string.IsNullOrEmpty(Model.YearEnd) && Model.YearStart == Model.YearEnd)
        {
          @: %20year:@(Model.YearStart)
        }
        else if(!string.IsNullOrEmpty(Model.YearStart) && !string.IsNullOrEmpty(Model.YearEnd) && Model.YearStart != Model.YearEnd)
        {
          @: %20year:@(Model.YearStart)-@(Model.YearEnd)
        }
        else if(!string.IsNullOrEmpty(Model.YearStart) && string.IsNullOrEmpty(Model.YearEnd))
        {
          @: %20year:@(Model.YearStart)-3000
        }
        else if(string.IsNullOrEmpty(Model.YearStart) && !string.IsNullOrEmpty(Model.YearEnd))
        {
          @: %20year:0-@(Model.YearEnd)
        }
        @if(!string.IsNullOrEmpty(Model.Genre) && Model.Genre.Contains(" "))
        {
          @: &genre="@Utils.UrlEncode(Model.Genre)"
        }
        else if(!string.IsNullOrEmpty(Model.Genre) && !Model.Genre.Contains(" "))
        {
          @: &genre=@Utils.UrlEncode(Model.Genre)
        }
        &type=track
        @if(Model.CountryCode != "all")
        {
          @: &market=@(Model.CountryCode)
        }
        &limit=@(Model.PageCursor.NextTake)
        &offset=@(Model.PageCursor.NextSkip)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="tracks.items.*">
        <JsonPath Expr="id" Id="Id" Title="Id" Converter="String" HelpText=""/>
        <JsonPath Expr="name" Id="Name" Title="Name" Converter="String" HelpText=""/>
        <JsonPath Expr="album.artists[0].id" Id="ArtistId" Title="Artist Id" Converter="String" HelpText=""/>
        <JsonPath Expr="album.artists[0].name" Id="Artist" Title="Artist Name" Converter="String" HelpText=""/>
        <JsonPath Expr="album.id" Id="AlbumId" Title="Album Id" Converter="String" HelpText=""/>
        <JsonPath Expr="album.name" Id="Album" Title="Album Name" Converter="String" HelpText=""/>
        <Compute Id="Markets" Title="Markets">
          <Compute.Expr>
            <![CDATA[
            @{
            string marketsstripped = "";
            if(Model.MarketsInput is string)
            {
              var temp = Regex.Replace(Model.MarketsInput, @"\s+", " ");
              var temp2 = Regex.Replace(temp, @"\""", string.Empty);
              marketsstripped = temp2.Substring(1,temp2.Length-2);
            }
            @marketsstripped
            ]]>
          </Compute.Expr>
          <JsonPath Expr="available_markets" Id="MarketsInput" Converter="String" HelpText=""/>
        </Compute>
        <JsonPath Expr="disc_number" Id="DiscNum" Title="Disc Num" Converter="Int" HelpText=""/>
        <JsonPath Expr="duration_ms" Id="DurationMS" Title="Duration MS" Converter="Int" HelpText=""/>
        <JsonPath Expr="external_urls.spotify" Id="TrackLink" Title="Track Link" Converter="String" HelpText=""/>
      </JsonPath>
    </Parse>
    <Fail>
      <JsonPath Expr="errors.message"/>
    </Fail>
  </RestConnector>

  <RestConnector Id="PlaylistSearch" Title="Playlist Search" HelpUrl="https://developer.spotify.com/web-api/search-item/">
    <Parameters>
      <Text Id="Query" Title="Query" Debug.DefaultValue="flowers" Required="true"/>
      <Select Id="CountryCode" Title="Filter by Market" Required="false" DefaultValue="all" HelpText="">
        <DataSource>
          <Resource Id="CountryCodes"/>
        </DataSource>
      </Select>
    </Parameters>
    <Paging PageSize="50" EvenPages="false" MaxTake="100000">
      <Parse>
        <JsonPath Id="AvaliableRows" Expr="playlists.total"/>
      </Parse>
    </Paging>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name='Authorization'>Bearer  @(Model.Authenticator.Token)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.spotify.com/v1/search?
        q=@Utils.UrlEncode(Model.Query)
        &type=playlist
        @if(Model.CountryCode != "all")
        {
          @: &market=@(Model.CountryCode)
        }
        &limit=@(Model.PageCursor.NextTake)
        &offset=@(Model.PageCursor.NextSkip)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="playlists.items.*">
        <JsonPath Expr="id" Id="Id" Title="Id" Converter="String" HelpText=""/>
        <JsonPath Expr="name" Id="Name" Title="Name" Converter="String" HelpText=""/>
        <JsonPath Expr="tracks.total" Id="Tracks" Title="Tracks" Converter="Int" HelpText=""/>
        <JsonPath Expr="owner.id" Id="OwnerId" Title="Owner Id" Converter="String" HelpText=""/>
        <JsonPath Expr="external_urls.spotify" Id="PlaylistLink" Title="Playlist Link" Converter="String" HelpText=""/>
        <JsonPath Expr="owner.external_urls.spotify" Id="OwnerLink" Title="Owner Link" Converter="String" HelpText=""/>
        <JsonPath Expr="images[0].url" Id="Image" Title="Image" Converter="String" HelpText="" DefaultValue=""/>
      </JsonPath>
    </Parse>
    <Fail>
      <JsonPath Expr="errors.message"/>
    </Fail>
  </RestConnector>

  <RestConnector Id="TracksLookup" Title="Tracks Lookup" HelpUrl="https://developer.spotify.com/web-api/get-several-tracks/">
    <Parameters>
      <Text Id="TrackIds" Title="Track Ids" Debug.DefaultValue="3n3Ppam7vgaVa1iaRUc9Lp" HelpText="Enter up to 50 Track Ids separated by a new line" Required="true" Multiline="true"/>
      <Select Id="CountryCode" Title="Filter by Market" Required="false" DefaultValue="all" HelpText="">
        <DataSource>
          <Resource Id="CountryCodes"/>
        </DataSource>
      </Select>
    </Parameters>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name='Authorization'>Bearer  @(Model.Authenticator.Token)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.spotify.com/v1/tracks/
        ?ids=@(FetchTrackIdString())
        @if(Model.CountryCode != "all")
        {
          @: &market=@(Model.CountryCode)
        }
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="tracks.*">
        <JsonPath Expr="id" Id="Id" Title="Id" Converter="String" HelpText=""/>
        <JsonPath Expr="name" Id="Name" Title="Name" Converter="String" HelpText=""/>
        <JsonPath Expr="album.artists[0].id" Id="ArtistId" Title="Artist Id" Converter="String" HelpText=""/>
        <JsonPath Expr="album.artists[0].name" Id="Artist" Title="Artist Name" Converter="String" HelpText=""/>
        <JsonPath Expr="album.id" Id="AlbumId" Title="Album Id" Converter="String" HelpText=""/>
        <JsonPath Expr="album.name" Id="Album" Title="Album Name" Converter="String" HelpText=""/>
        <Compute Id="Markets" Title="Markets">
          <Compute.Expr>
            <![CDATA[
            @{
            string marketsstripped = "";
            if(Model.MarketsInput is string)
            {
              var temp = Regex.Replace(Model.MarketsInput, @"\s+", " ");
              var temp2 = Regex.Replace(temp, @"\""", string.Empty);
              marketsstripped = temp2.Substring(1,temp2.Length-2);
            }
            @marketsstripped
            ]]>
          </Compute.Expr>
          <JsonPath Expr="available_markets" Id="MarketsInput" Converter="String" HelpText=""/>
        </Compute>
        <JsonPath Expr="external_urls.spotify" Id="TrackLink" Title="Track Link" Converter="String" HelpText=""/>
      </JsonPath>
    </Parse>
    <Fail>
      <JsonPath Expr="errors.message"/>
    </Fail>
  </RestConnector>

  <RestConnector Id="TrackAudioAnalysis" Title="Track Audio Analysis" HelpUrl="https://developer.spotify.com/web-api/get-audio-analysis/">
    <Parameters>
      <Text Id="TrackId" Title="Track Id" Debug.DefaultValue="3n3Ppam7vgaVa1iaRUc9Lp" HelpText="" Required="true"/>
    </Parameters>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name='Authorization'>Bearer  @(Model.Authenticator.Token)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.spotify.com/v1/audio-analysis/
        @(Model.TrackId)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="track">
        <JsonPath Expr="duration" Id="Duration" Title="Duration" Converter="Double" HelpText=""/>
        <JsonPath Expr="num_samples" Id="Samples" Title="Samples" Converter="Int" HelpText=""/>
        <JsonPath Expr="analysis_sample_rate" Id="SampleRate" Title="AnalysisSampleRate" Converter="Int" HelpText=""/>
        <JsonPath Expr="analysis_channels" Id="Channels" Title="Channels" Converter="Int" HelpText=""/>
        <JsonPath Expr="end_of_fade_in" Id="EndofFadeIn" Title="End of Fade In" Converter="Double" HelpText=""/>
        <JsonPath Expr="start_of_fade_out" Id="StartofFadeOut" Title="Start of Fade Out" Converter="Double" HelpText=""/>
        <JsonPath Expr="loudness" Id="Loudness" Title="Loudness" Converter="Double" HelpText=""/>
        <JsonPath Expr="tempo" Id="Tempo" Title="Tempo" Converter="Double" HelpText=""/>
        <JsonPath Expr="tempo_confidence" Id="TempoConfidence" Title="Tempo Confidence" Converter="Double" HelpText=""/>
        <JsonPath Expr="time_signature" Id="TimeSignature" Title="Time Signature" Converter="Double" HelpText=""/>
        <JsonPath Expr="time_signature_confidence" Id="TimeSignatureConfidence" Title="Time Signature Confidence" Converter="Double" HelpText=""/>
        <JsonPath Expr="key" Id="Key" Title="Key" Converter="Int" HelpText=""/>
        <JsonPath Expr="key_confidence" Id="KeyConfidence" Title="Key Confidence" Converter="Double" HelpText=""/>
        <JsonPath Expr="mode" Id="Mode" Title="Mode" Converter="Int" HelpText=""/>
        <JsonPath Expr="mode_confidence" Id="ModeConfidence" Title="ModeConfidence" Converter="Double" HelpText=""/>
      </JsonPath>
    </Parse>
    <Fail>
      <JsonPath Expr="errors.message"/>
    </Fail>
  </RestConnector>

  <RestConnector Id="TrackAudioFeatures" Title="Tracks Audio Features" HelpUrl="https://developer.spotify.com/web-api/get-audio-features/">
    <Parameters>
      <Text Id="TrackIds" Title="Track Ids" Debug.DefaultValue="3n3Ppam7vgaVa1iaRUc9Lp" HelpText="Enter one or more Track Ids separated by a new line" Required="true" Multiline="true"/>
    </Parameters>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name='Authorization'>Bearer  @(Model.Authenticator.Token)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.spotify.com/v1/audio-features/
        ?ids=@(FetchTrackIdString())
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="audio_features.*">
        <JsonPath Expr="danceability" Id="Danceability" Title="Danceability" Converter="Double" HelpText=""/>
        <JsonPath Expr="energy" Id="Energy" Title="Energy" Converter="Double" HelpText=""/>
        <JsonPath Expr="key" Id="Key" Title="Key" Converter="Double" HelpText=""/>
        <JsonPath Expr="loudness" Id="Loudness" Title="Loudness" Converter="Double" HelpText=""/>
        <JsonPath Expr="mode" Id="Mode" Title="Mode" Converter="Double" HelpText=""/>
        <JsonPath Expr="speechiness" Id="Speechiness" Title="Speechiness" Converter="Double" HelpText=""/>
        <JsonPath Expr="acousticness" Id="Acousticness" Title="Acousticness" Converter="Double" HelpText=""/>
        <JsonPath Expr="instrumentalness" Id="Instrumentalness" Title="Instrumentalness" Converter="Double" HelpText=""/>
        <JsonPath Expr="liveness" Id="Liveness" Title="Liveness" Converter="Double" HelpText=""/>
        <JsonPath Expr="valence" Id="Valence" Title="Valence" Converter="Double" HelpText=""/>
        <JsonPath Expr="tempo" Id="Tempo" Title="Tempo" Converter="Double" HelpText=""/>
        <JsonPath Expr="duration_ms" Id="DurationMS" Title="Duration MS" Converter="Int" HelpText=""/>
      </JsonPath>
    </Parse>
    <Fail>
      <JsonPath Expr="errors.message"/>
    </Fail>
  </RestConnector>

  <RestConnector Id="ProfileLookup" Title="Profile Lookup" HelpUrl="https://developer.spotify.com/web-api/user-profile-endpoints/">
    <Parameters>
      <Text Id="UserId" Title="User Id" Debug.DefaultValue="diskborste" HelpText="" Required="true"/>
    </Parameters>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name='Authorization'>Bearer  @(Model.Authenticator.Token)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.spotify.com/v1/users/
        @(Model.UserId)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="id" Id="Id" Title="Id" Converter="String" HelpText=""/>
      <JsonPath Expr="display_name" Id="Name" Title="Name" Converter="String" HelpText=""/>
      <JsonPath Expr="followers.total" Id="Followers" Title="Followers" Converter="Int" HelpText=""/>
      <JsonPath Expr="external_urls.spotify" Id="ProfileLink" Title="Profile Link" Converter="String" HelpText=""/>
      <JsonPath Expr="images[0].url" Id="Image" Title="Image" Converter="String" HelpText=""/>
    </Parse>
    <Fail>
      <JsonPath Expr="errors.message"/>
    </Fail>
  </RestConnector>

  <RestConnector Id="PlaylistsFeatured" Title="Playlists Featured" HelpUrl="https://developer.spotify.com/web-api/get-list-featured-playlists/">
    <Parameters>
      <Select Id="CountryCode" Title="Filter by Country" Required="false" DefaultValue="all" HelpText="">
        <DataSource>
          <Resource Id="CountryCodes"/>
        </DataSource>
      </Select>
    </Parameters>
    <Paging PageSize="50" EvenPages="false" MaxTake="100000">
      <Parse>
        <JsonPath Id="AvaliableRows" Expr="playlists.total"/>
      </Parse>
    </Paging>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name='Authorization'>Bearer  @(Model.Authenticator.Token)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.spotify.com/v1/browse/featured-playlists?
        @if(Model.CountryCode != "all")
        {
          @: country=@(Model.CountryCode)
        }
        &limit=@(Model.PageCursor.NextTake)
        &offset=@(Model.PageCursor.NextSkip)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="playlists.items.*">
        <JsonPath Expr="id" Id="Id" Title="Id" Converter="String" HelpText=""/>
        <JsonPath Expr="name" Id="Name" Title="Name" Converter="String" HelpText=""/>
        <JsonPath Expr="tracks.total" Id="Tracks" Title="Tracks" Converter="Int" HelpText=""/>
        <JsonPath Expr="owner.id" Id="OwnerId" Title="Owner Id" Converter="String" HelpText=""/>
        <JsonPath Expr="external_urls.spotify" Id="PlaylistLink" Title="Playlist Link" Converter="String" HelpText=""/>
        <JsonPath Expr="images[0].url" Id="Image" Title="Image" Converter="String" HelpText=""/>
      </JsonPath>
    </Parse>
    <Fail>
      <JsonPath Expr="errors.message"/>
    </Fail>
  </RestConnector>

  <RestConnector Id="PlaylistsFromUser" Title="Playlists From User" HelpUrl="https://developer.spotify.com/web-api/get-list-users-playlists/">
    <Parameters>
      <Text Id="UserId" Title="User Id" Debug.DefaultValue="diskborste" HelpText="" Required="true"/>
    </Parameters>
    <Paging PageSize="50" EvenPages="false" MaxTake="100000">
      <Parse>
        <JsonPath Id="AvaliableRows" Expr="total"/>
      </Parse>
    </Paging>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name='Authorization'>Bearer  @(Model.Authenticator.Token)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.spotify.com/v1/users/
        @(Model.UserId)/playlists?
        limit=@(Model.PageCursor.NextTake)
        &offset=@(Model.PageCursor.NextSkip)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="items.*">
        <JsonPath Expr="id" Id="Id" Title="Id" Converter="String" HelpText=""/>
        <JsonPath Expr="name" Id="Name" Title="Name" Converter="String" HelpText=""/>
        <JsonPath Expr="tracks.total" Id="Tracks" Title="Tracks" Converter="Int" HelpText=""/>
        <JsonPath Expr="external_urls.spotify" Id="PlaylistLink" Title="Playlist Link" Converter="String" HelpText=""/>
        <JsonPath Expr="images[0].url" Id="Image" Title="Image" Converter="String" HelpText=""/>
      </JsonPath>
    </Parse>
    <Fail>
      <JsonPath Expr="errors.message"/>
    </Fail>
  </RestConnector>

  <RestConnector Id="PlaylistTracks" Title="Playlist Tracks" HelpUrl="https://developer.spotify.com/web-api/get-playlists-tracks/">
    <Parameters>
      <Text Id="UserId" Title="User Id" Debug.DefaultValue="diskborste" HelpText="" Required="true"/>
      <Text Id="PlaylistId" Title="Playlist Id" Debug.DefaultValue="53J3DTDlQYgOA0cmTo8X7p" HelpText="" Required="true"/>
    </Parameters>
    <Paging PageSize="50" EvenPages="false" MaxTake="100000">
      <Parse>
        <JsonPath Id="AvaliableRows" Expr="total"/>
      </Parse>
    </Paging>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name='Authorization'>Bearer  @(Model.Authenticator.Token)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.spotify.com/v1/users/
        @(Model.UserId)/playlists/
        @(Model.PlaylistId)/tracks?
        limit=@(Model.PageCursor.NextTake)
        &offset=@(Model.PageCursor.NextSkip)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="items[*]">
        <JsonPath Expr="track.id" Id="Id" Title="Id" Converter="String" HelpText=""/>
        <JsonPath Expr="added_at" Id="Added" Title="Added" Converter="DateTime" HelpText=""/>
        <JsonPath Expr="added_by.id" Id="AddedById" Title="Added by Id" Converter="String" HelpText=""/>
        <JsonPath Expr="added_by.external_urls.spotify" Id="AddedByLink" Title="Added by Link" Converter="String" HelpText=""/>
        <JsonPath Expr="track.name" Id="Name" Title="Name" Converter="String" HelpText=""/>
        <JsonPath Expr="track.popularity" Id="Popularity" Title="Popularity" Converter="Int" HelpText=""/>
        <JsonPath Expr="track.duration_ms" Id="DurationMS" Title="DurationMS" Converter="Int" HelpText=""/>
        <JsonPath Expr="track.artists[0].id" Id="ArtistId" Title="Artist Id" Converter="String" HelpText=""/>
        <JsonPath Expr="track.artists[0].name" Id="Artist" Title="Artist Name" Converter="String" HelpText=""/>
        <JsonPath Expr="track.album.id" Id="AlbumId" Title="Album Id" Converter="String" HelpText=""/>
        <JsonPath Expr="track.album.name" Id="AlbumName" Title="Album Name" Converter="String" HelpText=""/>
        <JsonPath Expr="track.external_urls.spotify" Id="TrackLink" Title="Track Link" Converter="String" HelpText=""/>
      </JsonPath>
    </Parse>
    <Fail>
      <JsonPath Expr="errors.message"/>
    </Fail>
  </RestConnector>

  <RestConnector Id="CheckifUsersFollowsPlaylist" Title="Check if Users Follows Playlist" HelpUrl="https://developer.spotify.com/web-api/check-user-following-playlist/">
    <Parameters>
      <Text Id="UserId" Title="User Id of Playlist Owner" Debug.DefaultValue="ericbaffoy" HelpText="" Required="true"/>
      <Text Id="PlaylistId" Title="Playlist Id" Debug.DefaultValue="6dZGF7wrG6oqwNaWZWBBWQ" HelpText="" Required="true"/>
      <Text Id="UserIds" Title="User Ids to Check" Debug.DefaultValue="ericbaffoy" HelpText="Enter up to 5 User Ids separated by a new line" Required="true" Multiline="true"/>
    </Parameters>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name='Authorization'>Bearer  @(Model.Authenticator.Token)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.spotify.com/v1/users/
        @(Model.UserId)/playlists/
        @(Model.PlaylistId)/followers/contains
        ?ids=@(FetchUserIdString())
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.*">
        <JsonPath Expr="." Id="Status" Title="Status" Converter="Bool" HelpText=""/>
      </JsonPath>
    </Parse>
    <Fail>
      <JsonPath Expr="errors.message"/>
    </Fail>
  </RestConnector>

  <RestConnector Id="ArtistsLookup" Title="Artists Lookup" HelpUrl="https://developer.spotify.com/web-api/get-several-artists/">
    <Parameters>
      <Text Id="ArtistIds" Title="Artist Ids" Debug.DefaultValue="18Zv2g2vUcEGqJf6WnjfXN" HelpText="Enter up to 50 Artist Ids separated by a new line" Required="true" Multiline="true"/>
    </Parameters>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name='Authorization'>Bearer  @(Model.Authenticator.Token)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.spotify.com/v1/artists/
        ?ids=@(FetchArtistIdString())
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="artists.*">
        <JsonPath Expr="id" Id="Id" Title="Id" Converter="String" HelpText=""/>
        <JsonPath Expr="name" Id="Name" Title="Name" Converter="String" HelpText=""/>
        <JsonPath Expr="popularity" Id="Popularity" Title="Popularity" Converter="Int" HelpText=""/>
        <JsonPath Expr="followers.total" Id="Followers" Title="Followers" Converter="Int" HelpText=""/>
        <Compute Id="Genres" Title="Genres">
          <Compute.Expr>
            <![CDATA[
            @{
            string genresstripped = "";
            if(Model.GenresInput is string)
            {
              var temp = Regex.Replace(Model.GenresInput, @"\s+", " ");
              var temp2 = Regex.Replace(temp, @"\""", string.Empty);
              genresstripped = temp2.Substring(1,temp2.Length-2);
            }
            @genresstripped
            ]]>
          </Compute.Expr>
          <JsonPath Expr="genres" Id="GenresInput" Converter="String" HelpText=""/>
        </Compute>
        <JsonPath Expr="external_urls.spotify" Id="ArtistLink" Title="Artist Link" Converter="String" HelpText=""/>
        <JsonPath Expr="images[0].url" Id="Image" Title="Image" Converter="String" HelpText="" DefaultValue=""/>
      </JsonPath>
    </Parse>
    <Fail>
      <JsonPath Expr="errors.message"/>
    </Fail>
  </RestConnector>

  <RestConnector Id="ArtistAlbums" Title="Artist Albums" HelpUrl="https://developer.spotify.com/web-api/get-artists-albums/">
    <Parameters>
      <Text Id="ArtistId" Title="Artist Id" Debug.DefaultValue="48iJCUj0CYA37eYXHiQG0K" HelpText="" Required="true"/>
      <Radio Id="AlbumType" Title="Filter by Album Type" DefaultValue="all" Required="false">
        <DataSource>
          <Item Id="all" Title="All"/>
          <Item Id="album" Title="Album"/>
          <Item Id="single" Title="Single"/>
          <Item Id="appears_on" Title="Appears On"/>
          <Item Id="compilation" Title="Compilation"/>
        </DataSource>
      </Radio>
      <Select Id="CountryCode" Title="Filter by Market" Required="false" DefaultValue="all" HelpText="">
        <DataSource>
          <Resource Id="CountryCodes"/>
        </DataSource>
      </Select>
    </Parameters>
    <Paging PageSize="50" EvenPages="false" MaxTake="100000">
      <Parse>
        <JsonPath Id="AvaliableRows" Expr="total"/>
      </Parse>
    </Paging>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name='Authorization'>Bearer  @(Model.Authenticator.Token)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.spotify.com/v1/artists/
        @(Model.ArtistId)/albums?
        &limit=@(Model.PageCursor.NextTake)
        &offset=@(Model.PageCursor.NextSkip)
        @if(Model.CountryCode != "all")
        {
          @: &market=@(Model.CountryCode)
        }
        @if(Model.AlbumType != "all")
        {
          @: &album_type =@(Model.AlbumType)
        }
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="items.*">
        <JsonPath Expr="id" Id="Id" Title="Id" Converter="String" HelpText=""/>
        <JsonPath Expr="name" Id="Name" Title="Name" Converter="String" HelpText=""/>
        <JsonPath Expr="album_type" Id="Type" Title="Type" Converter="String" HelpText=""/>
        <Compute Id="Markets" Title="Markets">
          <Compute.Expr>
            <![CDATA[
            @{
            string marketsstripped = "";
            if(Model.MarketsInput is string)
            {
              var temp = Regex.Replace(Model.MarketsInput, @"\s+", " ");
              var temp2 = Regex.Replace(temp, @"\""", string.Empty);
              marketsstripped = temp2.Substring(1,temp2.Length-2);
            }
            @marketsstripped
            ]]>
          </Compute.Expr>
          <JsonPath Expr="available_markets" Id="MarketsInput" Converter="String" HelpText=""/>
        </Compute>
        <JsonPath Expr="external_urls.spotify" Id="AlbumLink" Title="Album Link" Converter="String" HelpText=""/>
        <JsonPath Expr="images[0].url" Id="Image" Title="Image" Converter="String" HelpText="" DefaultValue=""/>
      </JsonPath>
    </Parse>
    <Fail>
      <JsonPath Expr="errors.message"/>
    </Fail>
  </RestConnector>

  <RestConnector Id="ArtistRelatedArtists" Title="Artist Related Artists" HelpUrl="https://developer.spotify.com/web-api/get-related-artists/">
    <Parameters>
      <Text Id="ArtistId" Title="Artist Id" Debug.DefaultValue="7dGJo4pcD2V6oG8kP0tJRR" HelpText="" Required="true"/>
    </Parameters>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name='Authorization'>Bearer  @(Model.Authenticator.Token)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.spotify.com/v1/artists/
        @(Model.ArtistId)/related-artists
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="artists.*">
        <JsonPath Expr="id" Id="Id" Title="Id" Converter="String" HelpText=""/>
        <JsonPath Expr="name" Id="Name" Title="Name" Converter="String" HelpText=""/>
        <JsonPath Expr="popularity" Id="Popularity" Title="Popularity" Converter="Int" HelpText=""/>
        <JsonPath Expr="followers.total" Id="Followers" Title="Followers" Converter="Int" HelpText=""/>
        <Compute Id="Genres" Title="Genres">
          <Compute.Expr>
            <![CDATA[
            @{
            string genresstripped = "";
            if(Model.GenresInput is string)
            {
              var temp = Regex.Replace(Model.GenresInput, @"\s+", " ");
              var temp2 = Regex.Replace(temp, @"\""", string.Empty);
              genresstripped = temp2.Substring(1,temp2.Length-2);
            }
            @genresstripped
            ]]>
          </Compute.Expr>
          <JsonPath Expr="genres" Id="GenresInput" Converter="String" HelpText=""/>
        </Compute>
        <JsonPath Expr="external_urls.spotify" Id="ArtistLink" Title="Artist Link" Converter="String" HelpText=""/>
        <JsonPath Expr="images[0].url" Id="Image" Title="Image" Converter="String" HelpText="" DefaultValue=""/>
      </JsonPath>
    </Parse>
    <Fail>
      <JsonPath Expr="errors.message"/>
    </Fail>
  </RestConnector>

  <RestConnector Id="AlbumsLookup" Title="Albums Lookup" HelpUrl="https://developer.spotify.com/web-api/get-several-albums/">
    <Parameters>
      <Text Id="AlbumIds" Title="Album Ids" Debug.DefaultValue="0yCqicy5tGkPiB6gUZCRy4" HelpText="Enter up to 50 Album Ids separated by a new line" Required="true" Multiline="true"/>
    </Parameters>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name='Authorization'>Bearer  @(Model.Authenticator.Token)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.spotify.com/v1/albums/
        ?ids=@(FetchAlbumIdString())
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="albums.*">
        <JsonPath Expr="id" Id="Id" Title="Id" Converter="String" HelpText=""/>
        <JsonPath Expr="name" Id="Name" Title="Name" Converter="String" HelpText=""/>
        <JsonPath Expr="release_date" Id="ReleaseDate" Title="Released" Converter="DateTime" HelpText=""/>
        <Compute Id="Markets" Title="Markets">
          <Compute.Expr>
            <![CDATA[
            @{
            string marketsstripped = "";
            if(Model.MarketsInput is string)
            {
              var temp = Regex.Replace(Model.MarketsInput, @"\s+", " ");
              var temp2 = Regex.Replace(temp, @"\""", string.Empty);
              marketsstripped = temp2.Substring(1,temp2.Length-2);
            }
            @marketsstripped
            ]]>
          </Compute.Expr>
          <JsonPath Expr="available_markets" Id="MarketsInput" Converter="String" HelpText=""/>
        </Compute>
        <JsonPath Expr="artists[0].id" Id="ArtistId" Title="Artist Id" Converter="String" HelpText=""/>
        <JsonPath Expr="artists[0].name" Id="Artist" Title="Artist Name" Converter="String" HelpText=""/>
        <JsonPath Expr="external_urls.spotify" Id="AlbumLink" Title="Album Link" Converter="String" HelpText=""/>
        <JsonPath Expr="images[0].url" Id="Image" Title="Image" Converter="String" HelpText="" DefaultValue=""/>
      </JsonPath>
    </Parse>
    <Fail>
      <JsonPath Expr="errors.message"/>
    </Fail>
  </RestConnector>

  <RestConnector Id="AlbumTracks" Title="Album Tracks" HelpUrl="https://developer.spotify.com/web-api/get-albums-tracks/">
    <Parameters>
      <Text Id="AlbumId" Title="Album Id" Debug.DefaultValue="0yCqicy5tGkPiB6gUZCRy4" HelpText="" Required="true"/>
    </Parameters>
    <Paging PageSize="50" EvenPages="false" MaxTake="100000">
      <Parse>
        <JsonPath Id="AvaliableRows" Expr="total"/>
      </Parse>
    </Paging>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name='Authorization'>Bearer  @(Model.Authenticator.Token)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.spotify.com/v1/albums/
        @(Model.AlbumId)/tracks?
        limit=@(Model.PageCursor.NextTake)
        &offset=@(Model.PageCursor.NextSkip)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="items[*]">
        <JsonPath Expr="id" Id="Id" Title="Id" Converter="String" HelpText=""/>
        <JsonPath Expr="name" Id="Name" Title="Name" Converter="String" HelpText=""/>
        <JsonPath Expr="duration_ms" Id="DurationMS" Title="DurationMS" Converter="Int" HelpText=""/>
        <JsonPath Expr="external_urls.spotify" Id="TrackLink" Title="Track Link" Converter="String" HelpText=""/>
      </JsonPath>
    </Parse>
    <Fail>
      <JsonPath Expr="errors.message"/>
    </Fail>
  </RestConnector>

  <RestConnector Id="PlaylistAddTrack" Title="Playlist Add Track" HelpUrl="https://developer.spotify.com/documentation/web-api/reference/playlists/add-tracks-to-playlist/">
    <Parameters>
      <Text Id="UserId" Title="User Id" Debug.DefaultValue="diskborste" HelpText="" Required="true"/>
      <Text Id="PlaylistId" Title="Playlist Id" Debug.DefaultValue="53J3DTDlQYgOA0cmTo8X7p" HelpText="" Required="true"/>
      <Text Id="TrackId" Title="Track Id" Debug.DefaultValue="4VuS959DSpr82t3qBqCrWG" HelpText="" Required="true"/>
    </Parameters>
    <Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestHeaders>
          <Header Name='Authorization'>Bearer  @(Model.Authenticator.Token)</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://api.spotify.com/v1/users/
        @(Model.UserId)/playlists/
        @(Model.PlaylistId)/tracks
				?uris=spotify:track:@(Model.TrackId)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="snapshot_id" Id="Id" Title="Id" Converter="String" HelpText=""/>
    </Parse>
    <Fail>
      <JsonPath Expr="errors.message"/>
    </Fail>
  </RestConnector>

  <RazorFunctions>
    <![CDATA[
    string FetchTrackIdString()
    {
      string[] lines = ((string)Model.TrackIds).Trim().Split('\n').Select(e => e.Trim()).Where(e => !string.IsNullOrEmpty(e)).ToArray();
      return string.Join(",",lines.Select((e, i) => Utils.UrlEncode(e)).ToArray());
    }
    string FetchUserIdString()
    {
      string[] lines = ((string)Model.UserIds).Trim().Split('\n').Select(e => e.Trim()).Where(e => !string.IsNullOrEmpty(e)).Take(5).ToArray();
      return string.Join(",",lines.Select((e, i) => Utils.UrlEncode(e)).ToArray());
    }
    string FetchArtistIdString()
    {
      string[] lines = ((string)Model.ArtistIds).Trim().Split('\n').Select(e => e.Trim()).Where(e => !string.IsNullOrEmpty(e)).Take(50).ToArray();
      return string.Join(",",lines.Select((e, i) => Utils.UrlEncode(e)).ToArray());
    }
    string FetchAlbumIdString()
    {
      string[] lines = ((string)Model.AlbumIds).Trim().Split('\n').Select(e => e.Trim()).Where(e => !string.IsNullOrEmpty(e)).Take(50).ToArray();
      return string.Join(",",lines.Select((e, i) => Utils.UrlEncode(e)).ToArray());
    }
    ]]>
  </RazorFunctions>

</Suite>