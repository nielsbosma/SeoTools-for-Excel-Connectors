<?xml version="1.0" encoding="utf-8" ?>
<Suite Category="Finance" Title="Etherscan" Id="Etherscan" RequireVersion="7.0" SourceUrl="https://github.com/nielsbosma/SeoTools-for-Excel-Connectors/blob/master/Etherscan.xml" HelpUrl="http://seotoolsforexcel.com/etherscan/">

  <Author Name="Dovydas Meilunas" Url="https://github.com/dovydasm"/>

  <Settings HelpText="What's this?" HelpUrl="http://seotoolsforexcel.com/etherscan/">
    <Text Id="ApiKey" Title="API Key" Required="true" HelpUrl="http://seotoolsforexcel.com/etherscan/"/>
  </Settings>

  <Resources>
    <Resource Id="Fail">
      <Fail>
        <Regex Id="Error" Group="1">
          <Regex.Expr>
            <![CDATA[
            ","result":"Error! ([^"]+)"
            ]]>
          </Regex.Expr>
        </Regex>
      </Fail>
    </Resource>
  </Resources>

  <RestConnector Id="EtherBalance" Title="Ether balance" HelpUrl="https://etherscan.io/apis#accounts" HelpText="Retrieve Ethereum balance for an address">
    <Parameters>
      <Text Id="Addresses" Title="Addresses (one per line, 20 max)" Required="True" Multiline="true" Debug.DefaultValue="0x63a6121a7e1e29fE00Beb11F92bda892D185e91F"/>
    </Parameters>
    <Fetch>
      <Fetch.Url>
        <![CDATA[
        https://api.etherscan.io/api?module=account
        &action=balancemulti
        &address=@(FetchAddresses())
        &tag=latest
        &apikey=@(Model.ApiKey)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.result.*">
        <JsonPath Expr="account" Id="Account" Title="Account" Converter="String"/>
        <JsonPath Expr="balance" Id="Balance" Title="Balance" Converter="Double"/>
      </JsonPath>
    </Parse>
    <Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="SingleTokenBalance" Title="Single token balance" HelpUrl="https://etherscan.io/apis#tokens" HelpText="Get ERC20-Token Account Balance for Token Contract Address" Hidden="True">
    <Parameters>
      <Text Id="Address" Title="Wallet Address" Required="True"/>
      <Text Id="Search" Title="Token Name" Required="False"/>
      <Text Id="Contract" Title="Contract address" Select.Connector="TokensHidden" Select.IdField="Contract" Select.TitleField="Name" Required="true"/>
    </Parameters>
    <Fetch>
      <Fetch.Url>
        <![CDATA[
        https://api.etherscan.io/api?module=account&action=tokenbalance
        &contractaddress=0x57d90b64a1a57749b0f932f1a3395792e12e7055&
        address=0xe04f27eb70e025b78871a2ad7eabe85e61212761
        &tag=latest
        &apikey=@(Model.ApiKey)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.result.*">
        <JsonPath Expr="account" Id="Account" Title="Account" Converter="String"/>
        <JsonPath Expr="balance" Id="Balance" Title="Balance" Converter="Double"/>
      </JsonPath>
    </Parse>
    <Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="TokenBalance" Title="Token balance" HelpUrl="https://etherscan.io/tokens" HelpText="Lists all tokens and balances from an ERC20 wallet">
    <Parameters>
      <Text Id="Address" Name="Wallet Address" Required="True" Debug.DefaultValue="0x829BD824B016326A401d083B33D092293333A830"/>
    </Parameters>
    <Paging PageSize="25" MaxTake="10000" EvenPages="false">
      <Parse>
        <Regex Id="NextPageToken" IgnoreCase="true" DefaultValue="0" Converter="String" Group="1">
          <Regex.Expr>
            <![CDATA[href="(tokenholdings.+)">Next]]>
          </Regex.Expr>
        </Regex>
      </Parse>
    </Paging>
    <Fetch>
      <Fetch.Url>
        <![CDATA[
        @if(Model.PageCursor.Page != 0)
        {
          @: https://etherscan.io/@Model.NextPageToken
        }
        else {
        @: https://etherscan.io/tokenholdings?
        @: a=@(Model.Address)
        }
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//*[@@id=&quot;ContentPlaceHolder1_divresult&quot;]/div/table/tbody/tr" Converter="String">
        <Compute Id="Name">
          <Compute.Expr>
            <![CDATA[
            @{
              string name = "";
              if (Model.Text is string && !Model.Text.Contains("...")){
                name = Model.Text;
              }
              else if (Model.Title is string){
                name = Model.Title;
              }
              if (name.Contains("(")){
                name = name.Substring(0, name.IndexOf("("));
              }
            }
            @name
            ]]>
          </Compute.Expr>
          <XPath Expr="./td[2]/div" Id="Text" Converter="String"/>
          <XPath Expr="./td[2]/div/a/span" Id="Title" Attribute="title" Converter="String"/>
        </Compute>
        <Compute Id="Symbol" Converter="String">
          <Compute.Expr>
            <![CDATA[
            @{
              string name = "";
              if (Model.Text is string && !Model.Text.Contains("...")){
                name = Model.Text;
              }
              else if (Model.Title is string){
                name = Model.Title;
              }
              if (name.Contains(" ")){
                name = name.Substring(name.IndexOf(" "));
              }

            }
            @name
            ]]>
          </Compute.Expr>
          <XPath Expr="./td[4]" Id="Text" Converter="String"/>
          <XPath Expr="./td[4]/span" Attribute="title" Id="Title" Converter="String"/>
        </Compute>
        <Compute Id="Quantity" Converter="Double">
          <Compute.Expr>
            <![CDATA[
            @{
              string name = "";
              double qty = 0;
              if (Model.Text is string && !Model.Text.Contains("...")){
                name = Model.Text;
              }
              else if (Model.Title is string){
                name = Model.Title;
              }
              if (name.Contains(" ")){
                name = name.Substring(0, name.IndexOf(" "));
              }
              if (!Double.TryParse(name, out qty)){
                qty = 0;
              }
            }
            @name
            ]]>
          </Compute.Expr>
          <XPath Expr="./td[4]" Id="Text" Converter="String"/>
          <XPath Expr="./td[4]/span" Attribute="title" Id="Title" Converter="String"/>
        </Compute>
        <Compute Id="ValueUsd" Title="Value USD" Converter="Double">
          <Compute.Expr>
            <![CDATA[
            @{
              string price = "";
              double pricef = 0;
              if (Model.Text is string){
                Regex regex = new Regex(@"[\d,\.]+");
                Match match = regex.Match(Model.Text);
                price = match.Groups[0].Value;
              }
              if (!Double.TryParse(price, out pricef)){
                pricef = 0;
              }
            }
            @pricef
            ]]>
          </Compute.Expr>
          <XPath Expr="./td[5]" Id="Text" Converter="String"/>
        </Compute>
        <Compute Id="ValueEth" Title="Value ETH" Converter="Double">
          <Compute.Expr>
            <![CDATA[
            @{
              string price = "";
              double pricef = 0;
              if (Model.Text is string){
                Regex regex = new Regex(@"[\d,\.]+");
                Match match = regex.Match(Model.Text);
                price = match.Groups[0].Value;
              }
              if (!Double.TryParse(price, out pricef)){
                pricef = 0;
              }
            }
            @pricef
            ]]>
          </Compute.Expr>
          <XPath Expr="./td[6]" Id="Text" Converter="String"/>
        </Compute>
        <Compute Id="Change" Title="Change % (24hr)" Converter="Double">
          <Compute.Expr>
            <![CDATA[
            @{
              string price = "";
              double pricef = 0;
              if (Model.Text is string){
                Regex regex = new Regex(@"[\d,\.-]+");
                Match match = regex.Match(Model.Text);
                price = match.Groups[0].Value;
              }
              if (!Double.TryParse(price, out pricef)){
                pricef = 0;
              }
            }
            @pricef
            ]]>
          </Compute.Expr>
          <XPath Expr="./td[7]" Id="Text" Converter="String"/>
        </Compute>
      </XPath>
    </Parse>
    <Regex Expr="No token found" Group="0"/>
  </RestConnector>

  <RestConnector Id="TotalValue" Title="Total wallet value" HelpText="Total wallet value in ETH and USD">
    <Parameters>
      <Text Id="Address" Name="Wallet Address" Required="True" Debug.DefaultValue="0x829BD824B016326A401d083B33D092293333A830"/>
    </Parameters>
    <Fetch>
      <Fetch.Url>
        <![CDATA[https://etherscan.io/tokenholdings?a=@(Model.Address)]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="/html/body/div[1]/div[4]/div[2]/table/tr[2]/td[1]" Id="ValueEth" Title="Value ETH" Converter="Double" />
      <Compute Id="ValueUsd" Title="Value USD" Converter="Double">
        <Compute.Expr>
          <![CDATA[
            @{
              double x = 0;
              Regex regex = new Regex(@"\$([\d,\.]+)");
							Match match = regex.Match(Model.Val);
							if (!Double.TryParse(match.Groups[1].Value, out x)){
                x = 0;
              }
            }
            @(x)
            ]]>
        </Compute.Expr>
        <XPath Id="Val" Expr="/html/body/div[1]/div[4]/div[2]/table/tr[2]/td[2]"/>
      </Compute>
      <Compute Id="Change" Title="24hr change % (USD)" Converter="Double">
        <Compute.Expr>
          <![CDATA[
            @{
              double x = 0;
              if (Model.Val is string){
                Regex regex = new Regex(@"([\d\.-]+)%");
                Match match = regex.Match(Model.Val);

                if (!Double.TryParse(match.Groups[1].Value, out x)){
                  x = 0;
                }
              }
            }
            @(x)
            ]]>
        </Compute.Expr>
        <XPath Id="Val" Expr="/html/body/div[1]/div[4]/div[2]/table/tr[2]/td[2]"/>
      </Compute>
    </Parse>
    <Fail>
      <Regex Expr="No token found" Group="0"/>
    </Fail>
  </RestConnector>

  <RestConnector Id="AllTokens" Title="Global tokens list" HelpUrl="https://etherscan.io/tokens" HelpText="Lists all ERC20 tokens, with price and volume">
    <!--Todo: add sorting-->
    <Paging PageSize="50" MaxTake="10000" EvenPages="false">
      <Parse>
        <Regex Id="NextPageToken" IgnoreCase="true" DefaultValue="0" Converter="Int" Group="1">
          <Regex.Expr>
            <![CDATA[href="tokens\?p=(\d+)">Next]]>
          </Regex.Expr>
        </Regex>
      </Parse>
    </Paging>
    <Fetch>
      <Fetch.Url>
        <![CDATA[
        https://etherscan.io/tokens
          @if(Model.PageCursor.Page != 0)
          {
            @: ?p=@(Model.PageCursor.Page+1)
          }
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//*[@@id=&quot;ContentPlaceHolder1_divresult&quot;]/table/tbody/tr">
        <Compute Id="Name" Title="Name">
          <Compute.Expr>
            <![CDATA[
            @{
              string name = Model.FullName.Substring(0, Model.FullName.IndexOf("("));
            }
            @name
            ]]>
          </Compute.Expr>
          <XPath Expr="./td[3]/h5/a" Id="FullName" Converter="String" Checked="false"/>
        </Compute>
        <Compute Id="Contract" Title="Contract address">
          <Compute.Expr><![CDATA[
            @{
              string name = Model.Contract.Substring(7);
            }
            @name
            ]]></Compute.Expr>
          <XPath Expr="./td[3]/h5/a" Id="Contract" Attribute="href" Converter="String"/>
        </Compute>
        <Compute Id="Symbol" Title="Symbol">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex("\\((.+)\\)");
							Match match = regex.Match(Model.FullName);
            }
            @(match.Groups[1].Value)
            ]]>
          </Compute.Expr>
          <XPath Expr="./td[3]/h5/a" Id="FullName" Converter="String"/>
        </Compute>
        <XPath Expr="./td[3]/small/font" Id="Description" Title="Description" Converter="String" Checked="false"/>
        <Compute Id="PriceUSD" Title="Price USD" Converter="Double">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex("[\\d\\.]+");
							Match match = regex.Match(Model.PriceUsdLong);
            }
            @(match.Groups[0].Value)
            ]]>
          </Compute.Expr>
          <XPath Expr="./td[5]/span" Id="PriceUsdLong" Converter="String"/>
        </Compute>
        <Compute Id="PriceBTC" Title="Price BTC" Converter="Double">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex("([\\d\\.]+).Btc");
							Match match = regex.Match(Model.PriceBtcLong);
            }
            @(match.Groups[1].Value)
            ]]>
          </Compute.Expr>
          <XPath Expr="./td[5]/font" Id="PriceBtcLong" Converter="String"/>
        </Compute>
        <Compute Id="PriceETH" Title="Price ETH" Converter="Double">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex("([\\d\\.]+).Eth");
							Match match = regex.Match(Model.PriceEthLong);
            }
            @(match.Groups[1].Value)
            ]]>
          </Compute.Expr>
          <XPath Expr="./td[5]/font" Id="PriceEthLong" Converter="String"/>
        </Compute>
        <Compute Id="PriceChange" Title="Change Percent" Converter="Double">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex("[\\d\\.+-]+");
							Match match = regex.Match(Model.PriceChangeLong);
							string change = match.Groups[0].Value != "--" ? match.Groups[0].Value : "0";
            }
            @(change)
            ]]>
          </Compute.Expr>
          <XPath Expr="./td[6]" Id="PriceChangeLong" Converter="String"/>
        </Compute>
        <Compute Id="Volume" Title="Volume" Converter="Double">
          <Compute.Expr>
            <![CDATA[
            @{
              string x = Model.VolumeLong.Replace("$", "");
              double vol = double.Parse(x);
            }
            @(vol)
            ]]>
          </Compute.Expr>
          <XPath Expr="./td[7]" Id="VolumeLong" Converter="String"/>
        </Compute>
        <Compute Id="MarketCap" Title="Market Cap" Converter="Double">
          <Compute.Expr>
            <![CDATA[
            @{
              string x = Model.MarketCapLong.Replace("$", "");
              double mc = double.Parse(x);
            }
            @(mc)
            ]]>
          </Compute.Expr>
          <XPath Expr="./td[8]" Id="MarketCapLong" Converter="String"/>
        </Compute>
      </XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="TokensHidden" Hidden="True">
    <Parameters>
      <Text Id="Search" Title="Search" Required="True"></Text>
    </Parameters>
    <Fetch>
      <Fetch.Url>
        <![CDATA[
        https://etherscan.io/tokens?q=@(Model.Search)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//*[@@id=&quot;ContentPlaceHolder1_divSearchResult&quot;]/div/div/table/tbody/tr">
        <XPath Expr="./td[2]" Id="Name" Converter="String"/>
        <Compute Id="Contract" Title="Contract address">
          <Compute.Expr><![CDATA[
            @{
              string name = Model.Contract.Substring(7);
            }
            @name
            ]]></Compute.Expr>
          <XPath Expr="./td[1]/font/a" Id="Contract" Attribute="href" Converter="String"/>
        </Compute>
      </XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="BlocksMined" Title="Blocks mined by address" HelpUrl="https://etherscan.io/apis#accounts" HelpText="Get list of Blocks Mined by Address">
    <Parameters>
      <Text Id="Addresses" Title="Address" Required="True" Debug.DefaultValue="0x9dd134d14d1e65f84b706d6f205cd5b1cd03a46b"/>
    </Parameters>
    <Fetch>
      <Fetch.Url>
        <![CDATA[
        https://api.etherscan.io/api?module=account
        &action=getminedblocks
        &address=@(FetchAddresses())
        &blocktype=blocks
        &apikey=@(Model.ApiKey)
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="$.result.*">
        <Compute Id="Date">
          <Compute.Expr>
            <![CDATA[
              @(new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(Model.Ts))
            ]]>
          </Compute.Expr>
          <JsonPath Expr="timeStamp" Id="Ts" Converter="Int"/>
        </Compute>
        <JsonPath Expr="blockNumber" Id="BlockNumber" Title="Block Number" Converter="Int"/>
        <JsonPath Expr="blockReward" Id="BlockReward" Title="Block Reward" Converter="Double"/>
      </JsonPath>
    </Parse>
    <Resource Id="Fail"/>
  </RestConnector>

  <RazorFunctions>
    <![CDATA[
      string FetchAddresses()
      {
        string[] lines = ((string)Model.Addresses).Trim().Split('\n').Select(e => e.Trim()).Where(e => !string.IsNullOrEmpty(e)).Take(50).ToArray();
        return string.Join(",",lines.Select((e, i) => Utils.UrlEncode(e)).ToArray());
      }
    ]]>
  </RazorFunctions>
</Suite>